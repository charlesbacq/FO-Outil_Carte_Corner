{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f6bd8503",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Titre</th>\n",
       "      <th>EPD</th>\n",
       "      <th>FC</th>\n",
       "      <th>PP</th>\n",
       "      <th>PP Boostée</th>\n",
       "      <th>DLC</th>\n",
       "      <th>DLC si AA</th>\n",
       "      <th>AA</th>\n",
       "      <th>AA lundi</th>\n",
       "      <th>...</th>\n",
       "      <th>Chocolat</th>\n",
       "      <th>F1</th>\n",
       "      <th>F2</th>\n",
       "      <th>F3</th>\n",
       "      <th>Prix</th>\n",
       "      <th>R</th>\n",
       "      <th>R Province</th>\n",
       "      <th>Carte Dimanche</th>\n",
       "      <th>Rostis</th>\n",
       "      <th>Times chosen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000001</td>\n",
       "      <td>Banana cake</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>11.6414</td>\n",
       "      <td>89.80</td>\n",
       "      <td>140.09</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000006</td>\n",
       "      <td>Salade d'ananas zestissime</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>9.4679</td>\n",
       "      <td>145.34</td>\n",
       "      <td>245.63</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000007</td>\n",
       "      <td>Pièce du boucher &amp; pommes grenailles</td>\n",
       "      <td>PLAT</td>\n",
       "      <td>17.0926</td>\n",
       "      <td>119.99</td>\n",
       "      <td>75.60</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12.9</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000008</td>\n",
       "      <td>Compote de pommes &amp; crumble amandes</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>17.8704</td>\n",
       "      <td>104.70</td>\n",
       "      <td>163.33</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000009</td>\n",
       "      <td>Cake citron</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>12.3586</td>\n",
       "      <td>108.54</td>\n",
       "      <td>169.32</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ID                                 Titre      EPD       FC      PP  \\\n",
       "0  1000001                           Banana cake  DESSERT  11.6414   89.80   \n",
       "1  1000006            Salade d'ananas zestissime  DESSERT   9.4679  145.34   \n",
       "2  1000007  Pièce du boucher & pommes grenailles     PLAT  17.0926  119.99   \n",
       "3  1000008   Compote de pommes & crumble amandes  DESSERT  17.8704  104.70   \n",
       "4  1000009                           Cake citron  DESSERT  12.3586  108.54   \n",
       "\n",
       "  PP Boostée DLC DLC si AA AA AA lundi  ... Chocolat F1 F2 F3  Prix  R  \\\n",
       "0     140.09   2         3  1        0  ...           0  0  0   2.9  3   \n",
       "1     245.63   3         3  0        0  ...           0  0  0   3.9  4   \n",
       "2      75.60   1         1  0        0  ...           0  0  0  12.9  2   \n",
       "3     163.33   2         2  0        0  ...           0  0  0   4.9  3   \n",
       "4     169.32   2         2  0        0  ...           0  0  0   3.5  3   \n",
       "\n",
       "  R Province Carte Dimanche Rostis Times chosen  \n",
       "0          0              0      0            1  \n",
       "1          0              0      0            1  \n",
       "2          0              0      0            0  \n",
       "3          0              0      0            1  \n",
       "4          0              0      0            1  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import all the necessaries librairies\n",
    "from ortools.linear_solver import pywraplp\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import gspread\n",
    "from oauth2client.service_account import ServiceAccountCredentials\n",
    "\n",
    "# connect to google sheet with the json key\n",
    "gc = gspread.service_account(filename='projectoutilcarte.json')\n",
    "\n",
    "# connect Outil Carte\n",
    "doc_outil_carte = gc.open_by_url(\"https://docs.google.com/spreadsheets/d/1SK0G02uqYSGc-FFW76IPmObNnqEfDbwYQIKR62AgKwE/\")\n",
    "sheet_outil_carte = doc_outil_carte.worksheet(\"Input\")\n",
    "sheet_parametre = doc_outil_carte.worksheet(\"Paramètres V2\")\n",
    "data = sheet_outil_carte.get('A2:AC')\n",
    "headers = data.pop(0)\n",
    "\n",
    "# transform the data from google sheet to data frame that Python can read and display the first 5 rows of data\n",
    "df = pd.DataFrame(data, columns=headers)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "068c66b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define input data\n",
    "df[\"ID\"] = df[\"ID\"].astype(int)\n",
    "df[\"PP\"].replace('', np.nan, inplace=True)\n",
    "df[\"PP\"] = df[\"PP\"].astype(float).fillna(1)\n",
    "df[\"PP Boostée\"] = df[\"PP Boostée\"].astype(float).fillna(1)\n",
    "df[\"FC\"] = df[\"FC\"].astype(float)\n",
    "df[\"DLC\"] = df[\"DLC\"].astype(int)\n",
    "df[\"DLC si AA\"] = df[\"DLC si AA\"].astype(int)\n",
    "df[\"AA\"] = df[\"AA\"].astype(int)\n",
    "df[\"AA lundi\"] = df[\"AA lundi\"].astype(int)\n",
    "df[\"Province\"] = df[\"Province\"].astype(int)\n",
    "df[\"Regime\"] = df[\"Regime\"].astype(str)\n",
    "df[\"Sous Categ Proteine\"] = df[\"Sous Categ Proteine\"].astype(str)\n",
    "df[\"Forme légumes\"] = df[\"Forme légumes\"].astype(str)\n",
    "df[\"Soupe equivalent\"] = df[\"Soupe equivalent\"].astype(str)\n",
    "df[\"Base\"] = df[\"Base\"].astype(str)\n",
    "df[\"Féculent\"] = df[\"Féculent\"].astype(str)\n",
    "df[\"Légumes\"] = df[\"Légumes\"].astype(str)\n",
    "df[\"Chaud/Froid\"] = df[\"Chaud/Froid\"].astype(str)\n",
    "df[\"Chocolat\"] = df[\"Chocolat\"].astype(str)\n",
    "df[\"F1\"] = df[\"F1\"].astype(int)\n",
    "df[\"F2\"] = df[\"F2\"].astype(int)\n",
    "df[\"F3\"] = df[\"F3\"].astype(int)\n",
    "df[\"Prix\"] = df[\"Prix\"].astype(float)\n",
    "df[\"R\"] = df[\"R\"].astype(int)\n",
    "df[\"R Province\"] = df[\"R Province\"].astype(int)\n",
    "df[\"Carte Dimanche\"] = df[\"Carte Dimanche\"].astype(int)\n",
    "df[\"Rostis\"] = df[\"Rostis\"].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e4403e75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M is 20\n",
      "N is 7\n"
     ]
    }
   ],
   "source": [
    "## Input the model paramètres\n",
    "\n",
    "# Retrieve the j values from the worksheet\n",
    "jours = [0, 1, 2, 3, 4, 5, 6]\n",
    "\n",
    "nb_categ_data = sheet_parametre.acell('P1').value\n",
    "constraints_all = sheet_parametre.range('A1:H')\n",
    "constraints_particular = sheet_parametre.range('S3:Z')\n",
    "parameters_building_data = sheet_parametre.range('P3:Q{}'.format(str(int(nb_categ_data)+int(2))))\n",
    "\n",
    "# Retrieve the RHS values for each constraint\n",
    "constraints = ['ENTREE', 'PLAT', 'DESSERT']\n",
    "constraints_base = ['PÂTE', 'RIZ']\n",
    "constraints_formule = ['F1', 'F2', 'F3']\n",
    "\n",
    "constant_M = sheet_parametre.acell('J4').value\n",
    "constant_N = sheet_parametre.acell('J6').value\n",
    "\n",
    "M = int(constant_M)\n",
    "N = int(constant_N)\n",
    "print(\"M is\", M)\n",
    "print(\"N is\", N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "37eea7ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "30\n",
      "{'nb_EPD': {'ENTREE': [10, 10, 10, 10, 9, 6, 6], 'PLAT': [21, 21, 21, 21, 21, 18, 16], 'DESSERT': [9, 9, 9, 9, 9, 6, 6]}, 'AA': {'ENTREE': [2, 2, 2, 2, 2, 2, 1], 'PLAT': [2, 3, 3, 3, 3, 3, 3], 'DESSERT': [2, 2, 2, 2, 2, 1, 1]}, 'province': {'ENTREE': [0, 0, 0, 0, 0, 0, 0], 'PLAT': [0, 0, 0, 0, 0, 0, 0], 'DESSERT': [0, 0, 0, 0, 0, 0, 0]}, 'froid': {'ENTREE': [0, 0, 0, 0, 0, 0, 0], 'PLAT': [7, 7, 7, 7, 7, 4, 4], 'DESSERT': [0, 0, 0, 0, 0, 0, 0]}, 'froid_province': {'ENTREE': [0, 0, 0, 0, 0, 0, 0], 'PLAT': [0, 0, 0, 0, 0, 0, 0], 'DESSERT': [0, 0, 0, 0, 0, 0, 0]}, 'viande': {'ENTREE': [0, 0, 0, 0, 0, 0, 0], 'PLAT': [6, 6, 6, 6, 6, 5, 4], 'DESSERT': [0, 0, 0, 0, 0, 0, 0]}, 'poisson': {'ENTREE': [0, 0, 0, 0, 0, 0, 0], 'PLAT': [4, 4, 4, 4, 4, 3, 3], 'DESSERT': [0, 0, 0, 0, 0, 0, 0]}, 'base': {'PÂTE': [8, 8, 8, 8, 8, 4, 4], 'RIZ': [6, 6, 6, 6, 6, 4, 4]}, 'formule': {'F1': [3, 3, 3, 3, 3, 3, 3], 'F2': [3, 3, 3, 3, 3, 3, 3], 'F3': [3, 3, 3, 3, 3, 3, 3]}, 'formule_province': {'F1': [0, 0, 0, 0, 0, 0, 0], 'F2': [0, 0, 0, 0, 0, 0, 0], 'F3': [0, 0, 0, 0, 0, 0, 0]}, 'prix': {'0 - 6.9': [0, 0, 0, 0, 0, 0, 0], '6.9 - 8': [0, 0, 0, 0, 0, 0, 0], '8 - 9': [0, 0, 0, 0, 0, 0, 0], '9 -  10': [0, 0, 0, 0, 0, 0, 0]}, 'max_carotte': {'CAROTTE': [3, 3, 3, 3, 3, 2, 2], 'DIPS': [3, 3, 3, 3, 3, 2, 2]}, 'base_dessert': {'YAOURT': [3, 4, 4, 4, 4, 3, 2], 'GÂTEAU': [3, 3, 3, 3, 3, 2, 2], 'FRUIT': [3, 4, 4, 4, 4, 2, 2], 'MOUSSE': [3, 3, 3, 3, 3, 2, 2], 'COMPOTE': [3, 3, 3, 3, 3, 2, 2]}, 'sous_protein': {'BOEUF': [21, 21, 21, 21, 21, 18, 16], 'POULET': [21, 21, 21, 21, 21, 18, 16], 'SAUMON': [21, 21, 21, 21, 21, 18, 16], 'CREVETTE': [21, 21, 21, 21, 21, 18, 16], 'OEUF': [21, 21, 21, 21, 21, 18, 16], 'PORC': [21, 21, 21, 21, 21, 18, 16], 'HARENG': [21, 21, 21, 21, 21, 18, 16], 'LIEU_NOIR': [21, 21, 21, 21, 21, 18, 16], 'ANCHOIS': [21, 21, 21, 21, 21, 18, 16], 'LIEU_JAUNE': [21, 21, 21, 21, 21, 18, 16], 'CABILLAUD': [21, 21, 21, 21, 21, 18, 16], 'SARDINE': [21, 21, 21, 21, 21, 18, 16], 'THON': [21, 21, 21, 21, 21, 18, 16], 'CANARD': [21, 21, 21, 21, 21, 18, 16], 'AGNEAU': [21, 21, 21, 21, 21, 18, 16], 'MAQUEREAU': [21, 21, 21, 21, 21, 18, 16], 'FALAFEL': [21, 21, 21, 21, 21, 18, 16], 'GALETTE': [21, 21, 21, 21, 21, 18, 16], 'TOFU': [21, 21, 21, 21, 21, 18, 16], 'MERLU': [21, 21, 21, 21, 21, 18, 16], 'VEAU': [21, 21, 21, 21, 21, 18, 16], 'JULIENNE': [21, 21, 21, 21, 21, 18, 16], 'MERLAN': [21, 21, 21, 21, 21, 18, 16]}, 'split_epd': {'ENTREE': [10, 10, 10, 10, 10, 10, 10], 'PLAT': [30, 30, 30, 30, 30, 30, 30], 'DESSERT': [10, 10, 10, 10, 10, 10, 10]}}\n"
     ]
    }
   ],
   "source": [
    "list_names = [\n",
    "    \"nb_EPD\", \"AA\", \"province\", \"froid\", \"froid_province\", \"viande\",\n",
    "    \"poisson\", \"base\", \"formule\", \"formule_province\", \"prix\", \"max_carotte\",\n",
    "    \"base_dessert\", \"sous_protein\", \"split_epd\"\n",
    "]\n",
    "\n",
    "print(len(list_names) == int(nb_categ_data))\n",
    "\n",
    "# Créer un dictionnaire pour stocker les variables dynamiques\n",
    "rhs_values = {}\n",
    "print(len(parameters_building_data))\n",
    "# Boucle pour créer les variables et les stocker dans le dictionnaire\n",
    "for i in range(len(list_names)):\n",
    "    name = list_names[i]\n",
    "    rhs_values[name] = {}\n",
    "    start_row = int(parameters_building_data[2*i].value)-1 # passage to gsheet to code (-1)\n",
    "    nb_rows = int(parameters_building_data[2*i+1].value)\n",
    "    for j in range(nb_rows):\n",
    "        rhs_values[name][constraints_all[8*(start_row+j)].value] = [int(cell.value) for cell in constraints_all[8*(start_row+j)+1:8*(start_row+j+1)]]\n",
    "        \n",
    "print(rhs_values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dae65ba8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ok\n"
     ]
    }
   ],
   "source": [
    "# Import the mip solver with the SCIP backend.\n",
    "solver = pywraplp.Solver.CreateSolver(\"SAT\")\n",
    "#solver = pywraplp.Solver.CreateSolver(\"SCIP\")\n",
    "\n",
    "if not solver:\n",
    "    print(\"problem\")\n",
    "    solver.SetNumThreads(1)  # Définit le nombre de threads utilisés\n",
    "    solver.EnableOutput()  \n",
    "else:\n",
    "    print(\"ok\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0f53f9ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of variables = 4527\n"
     ]
    }
   ],
   "source": [
    "# Define variables and build constraintes between them\n",
    "carte_vars = {}\n",
    "dish_count_vars = {}\n",
    "y_vars ={}\n",
    "\n",
    "for i in df.index:\n",
    "    dish_count_vars[i] = solver.IntVar(1, 2, f'Dish_Count_{i}') # constraints of dishcount <= 2\n",
    "    y_vars[i] = solver.IntVar(0, 1, f'y_{i}')\n",
    "    carte_vars[i] = {}\n",
    "    for j in jours:\n",
    "        carte_vars[i][j] = solver.IntVar(0, 1, f'Carte_{i}_{j}')\n",
    "\n",
    "for i in df.index : \n",
    "    # Add the constraint to update dish count variables\n",
    "    solver.Add(dish_count_vars[i] == sum(carte_vars[i][j] for j in range(7)))\n",
    "    ## dishcount[i] = sum(0<=i<=6) carte_vars[i][j] and y[i] <= dishcount[i] <= 2y[i]\n",
    "    #solver.Add(dish_count_vars[i] >= y_vars[i])\n",
    "    #solver.Add(dish_count_vars[i] <= 2*y_vars[i])\n",
    "        \n",
    "print(\"Number of variables =\", solver.NumVariables())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c38e0027",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'# No dish can be included on the menu before its expiry date : RNOK\\nfor i in df.index:\\n    for j in jours:\\n        sum_carte_vars = sum(carte_vars[i][k] for k in range(j,min(6,j+df.loc[i,\"DLC\"])))\\n        solver.Add(sum_carte_vars <= 1)\\n'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''# No dish can be included on the menu before its expiry date : RNOK\n",
    "for i in df.index:\n",
    "    for j in jours:\n",
    "        sum_carte_vars = sum(carte_vars[i][k] for k in range(j,min(6,j+df.loc[i,\"DLC\"])))\n",
    "        solver.Add(sum_carte_vars <= 1)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ad2d42f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ENTREE\n",
      "10\n",
      "<class 'int'>\n",
      "PLAT\n",
      "21\n",
      "<class 'int'>\n",
      "DESSERT\n",
      "9\n",
      "<class 'int'>\n",
      "ENTREE\n",
      "10\n",
      "<class 'int'>\n",
      "PLAT\n",
      "21\n",
      "<class 'int'>\n",
      "DESSERT\n",
      "9\n",
      "<class 'int'>\n",
      "ENTREE\n",
      "10\n",
      "<class 'int'>\n",
      "PLAT\n",
      "21\n",
      "<class 'int'>\n",
      "DESSERT\n",
      "9\n",
      "<class 'int'>\n",
      "ENTREE\n",
      "10\n",
      "<class 'int'>\n",
      "PLAT\n",
      "21\n",
      "<class 'int'>\n",
      "DESSERT\n",
      "9\n",
      "<class 'int'>\n",
      "ENTREE\n",
      "9\n",
      "<class 'int'>\n",
      "PLAT\n",
      "21\n",
      "<class 'int'>\n",
      "DESSERT\n",
      "9\n",
      "<class 'int'>\n",
      "ENTREE\n",
      "6\n",
      "<class 'int'>\n",
      "PLAT\n",
      "18\n",
      "<class 'int'>\n",
      "DESSERT\n",
      "6\n",
      "<class 'int'>\n",
      "ENTREE\n",
      "6\n",
      "<class 'int'>\n",
      "PLAT\n",
      "16\n",
      "<class 'int'>\n",
      "DESSERT\n",
      "6\n",
      "<class 'int'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'      \\n    # Nb AA per day \\n    for type_epd in rhs_values[\\'AA\\']:\\n        rhs_AA = rhs_values[\\'AA\\'][type_epd][j]  \\n        if j == 0:\\n            sum_carte_vars_AA_lundi = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"AA lundi\"] == 1)\\n            solver.Add(sum_carte_vars_AA_lundi >= rhs_AA)\\n        else:\\n            sum_carte_vars_AA = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"AA\"] == 1)\\n            solver.Add(sum_carte_vars_AA >= rhs_AA)\\n            \\n    # Province\\n    for type_epd in rhs_values[\\'province\\']:\\n        rhs_province = rhs_values[\\'province\\'][type_epd][j]\\n        sum_carte_vars_province = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"Province\"] == 1)\\n        solver.Add(sum_carte_vars_province >= rhs_province)\\n       \\n    # Chaud/ Froid  \\n    for type_epd in rhs_values[\\'froid\\']:\\n        rhs_froid = rhs_values[\\'froid\\'][type_epd][j]  \\n        sum_carte_vars_froid = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and (df.loc[k, \"Chaud/Froid\"] == \"froid\" or df.loc[k, \"Chaud/Froid\"] == \"chaud/froid\"))\\n        solver.Add(sum_carte_vars_froid >= rhs_froid)\\n\\n        rhs_froid_province = rhs_values[\\'froid_province\\'][type_epd][j]  # Accéder à la valeur correspondante\\n        sum_carte_vars_froid_province = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"Chaud/Froid\"] == \"chaud\" and df.loc[k, \"Province\"] == 1)\\n        solver.Add(sum_carte_vars_froid_province >= rhs_froid_province)\\n\\n    #Regime viande\\n    for type_epd in rhs_values[\\'viande\\']:\\n        rhs_viande = rhs_values[\\'viande\\'][type_epd][j]\\n        sum_carte_vars_viande = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"Regime\"] == \"VIANDE\")\\n        solver.Add(sum_carte_vars_viande >= rhs_viande)\\n    \\n    # Sous-catégorie féculent\\n    for type_feculent in rhs_values[\\'base\\']:\\n        rhs_base = rhs_values[\\'base\\'][type_feculent][j]\\n        sum_feculent = sum(carte_vars[k][j] for k in df.index\\n                           if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k, \"Féculent\"] == type_feculent)\\n        solver.Add(sum_feculent <= rhs_base)\\n     \\n    # Formules\\n    for type_formule in rhs_values[\\'formule\\']:\\n        rhs_formule = rhs_values[\\'formule\\'][type_formule][j]\\n        sum_carte_vars_formule = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k,type_formule ] == 1)\\n        solver.Add(sum_carte_vars_formule >= rhs_formule)\\n        \\n    # Formules Province\\n    for type_formule in rhs_values[\\'formule_province\\']:\\n        rhs_formule_province = rhs_values[\\'formule_province\\'][type_formule][j]\\n        sum_carte_vars_formule_province = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k, type_formule] == 1 and df.loc[k, \"Province\"] == 1)\\n        solver.Add(sum_carte_vars_formule_province >= rhs_formule_province)\\n    \\n    # Prix\\n    for type_prix in rhs_values[\\'prix\\']:\\n        rhs_prix = rhs_values[\\'prix\\'][type_prix][j]\\n        prix_inf, prix_sup = float(type_prix.split(\" - \")[0]),float(type_prix.split(\" - \")[1])\\n        sum_prix = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"Prix\"] > prix_inf and df.loc[i, \"Prix\"] <= prix_sup)\\n    \\n    # Max carotte\\n    for type_carotte in rhs_values[\\'max_carotte\\']:\\n        rhs_carotte = rhs_values[\\'max_carotte\\'][type_carotte][j]\\n        sum_max_carotte = sum(carte_vars[i][j] for i in df.index\\n                          if df.loc[i, \"EPD\"] == \"ENTREE\" and df.loc[i, \"Base\"] == \\'LEGUME\\'\\n                          and df.loc[i, \"Légumes\"] == type_carotte)\\n    # Base Dessert\\n    for type_dessert in rhs_values[\\'base_dessert\\']:\\n        rhs_dessert = rhs_values[\\'base_dessert\\'][type_dessert][j]\\n        sum_base_dessert = sum(carte_vars[k][j] for k in df.index\\n                               if df.loc[k, \"EPD\"] == \\'DESSERT\\'\\n                               and df.loc[k, \"Base\"] == type_dessert)\\n        solver.Add(sum_base_dessert <= rhs_dessert)\\n \\n\\n    # Sous Proteines\\nfor type_sous_protein in rhs_values[\\'sous_protein\\']:\\n    for j in jours : \\n        rhs_sous_protein = rhs_values[\\'sous_protein\\'][type_sous_protein][j]\\n        sum_sous_protein = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == \\'PLAT\\' and df.loc[k, \"Sous Categ Proteine\"] == type_sous_protein)\\n        solver.Add(sum_sous_protein <= rhs_sous_protein)   \\n\\n    # Max 2 chocolat par jour\\nfor j in jours : \\n    sum_chocolat = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"Chocolat\"] == \"CHOCOLAT\")\\n    solver.Add(sum_chocolat <= 2)\\n\\n    # Min 1 fromage blanc ou yaourt per day\\n    sum_fromage_yaourt = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"Base\"] == \"YAOURT\")\\n    solver.Add(sum_fromage_yaourt >= 1)\\n\\n    # 3 differentes recettes soupe maximum par jour\\n    sum_soupe = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"Forme légumes\"] == \\'SOUPE\\')\\n    solver.Add(sum_soupe <= 3)\\n    \\n### FIN DE LA BOUCLE    \\n\\n# DLC min J+3 le samedi. Pas de DLC J+1 pour le vendredi et le dimanche\\nfor j in [4, 5, 6]:\\n    if j == 5:\\n        sum_dlc_saturday = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"DLC\"] < 3)\\n        solver.Add(sum_dlc_saturday <= 2)\\n    else:\\n        sum_dlc_other = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"DLC\"] < 2)\\n        solver.Add(sum_dlc_other <= 0)\\n        \\n# Röstis seulement le weekend\\nfor j in [0, 1, 2, 3, 4]:\\n        sum_rostis = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"EPD\"] == \"ENTREE\" and df.loc[i, \"Rostis\"] == 1)\\n        solver.Add(sum_rostis == 0)\\n        \\n# Pas de même plat le lundi et le dimanche S-1\\nsum_same_dish = sum(carte_vars[i][0] for i in df.index if df.loc[i, \"Carte Dimanche\"] == 1)\\nsolver.Add(sum_same_dish == 0)\\n'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for j in jours:\n",
    "    \n",
    "    # Nb de plats per day\n",
    "    for type_epd in ['ENTREE', 'PLAT', 'DESSERT']:\n",
    "        print(type_epd)\n",
    "        rhs_nb_EPD = rhs_values['nb_EPD'][type_epd][j]\n",
    "        print(rhs_nb_EPD)\n",
    "        print(type(rhs_nb_EPD))\n",
    "        sum_carte_vars = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd)\n",
    "        solver.Add(sum_carte_vars == rhs_nb_EPD)\n",
    "        \n",
    "'''      \n",
    "    # Nb AA per day \n",
    "    for type_epd in rhs_values['AA']:\n",
    "        rhs_AA = rhs_values['AA'][type_epd][j]  \n",
    "        if j == 0:\n",
    "            sum_carte_vars_AA_lundi = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"AA lundi\"] == 1)\n",
    "            solver.Add(sum_carte_vars_AA_lundi >= rhs_AA)\n",
    "        else:\n",
    "            sum_carte_vars_AA = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"AA\"] == 1)\n",
    "            solver.Add(sum_carte_vars_AA >= rhs_AA)\n",
    "            \n",
    "    # Province\n",
    "    for type_epd in rhs_values['province']:\n",
    "        rhs_province = rhs_values['province'][type_epd][j]\n",
    "        sum_carte_vars_province = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"Province\"] == 1)\n",
    "        solver.Add(sum_carte_vars_province >= rhs_province)\n",
    "       \n",
    "    # Chaud/ Froid  \n",
    "    for type_epd in rhs_values['froid']:\n",
    "        rhs_froid = rhs_values['froid'][type_epd][j]  \n",
    "        sum_carte_vars_froid = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and (df.loc[k, \"Chaud/Froid\"] == \"froid\" or df.loc[k, \"Chaud/Froid\"] == \"chaud/froid\"))\n",
    "        solver.Add(sum_carte_vars_froid >= rhs_froid)\n",
    "\n",
    "        rhs_froid_province = rhs_values['froid_province'][type_epd][j]  # Accéder à la valeur correspondante\n",
    "        sum_carte_vars_froid_province = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"Chaud/Froid\"] == \"chaud\" and df.loc[k, \"Province\"] == 1)\n",
    "        solver.Add(sum_carte_vars_froid_province >= rhs_froid_province)\n",
    "\n",
    "    #Regime viande\n",
    "    for type_epd in rhs_values['viande']:\n",
    "        rhs_viande = rhs_values['viande'][type_epd][j]\n",
    "        sum_carte_vars_viande = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd and df.loc[k, \"Regime\"] == \"VIANDE\")\n",
    "        solver.Add(sum_carte_vars_viande >= rhs_viande)\n",
    "    \n",
    "    # Sous-catégorie féculent\n",
    "    for type_feculent in rhs_values['base']:\n",
    "        rhs_base = rhs_values['base'][type_feculent][j]\n",
    "        sum_feculent = sum(carte_vars[k][j] for k in df.index\n",
    "                           if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k, \"Féculent\"] == type_feculent)\n",
    "        solver.Add(sum_feculent <= rhs_base)\n",
    "     \n",
    "    # Formules\n",
    "    for type_formule in rhs_values['formule']:\n",
    "        rhs_formule = rhs_values['formule'][type_formule][j]\n",
    "        sum_carte_vars_formule = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k,type_formule ] == 1)\n",
    "        solver.Add(sum_carte_vars_formule >= rhs_formule)\n",
    "        \n",
    "    # Formules Province\n",
    "    for type_formule in rhs_values['formule_province']:\n",
    "        rhs_formule_province = rhs_values['formule_province'][type_formule][j]\n",
    "        sum_carte_vars_formule_province = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k, type_formule] == 1 and df.loc[k, \"Province\"] == 1)\n",
    "        solver.Add(sum_carte_vars_formule_province >= rhs_formule_province)\n",
    "    \n",
    "    # Prix\n",
    "    for type_prix in rhs_values['prix']:\n",
    "        rhs_prix = rhs_values['prix'][type_prix][j]\n",
    "        prix_inf, prix_sup = float(type_prix.split(\" - \")[0]),float(type_prix.split(\" - \")[1])\n",
    "        sum_prix = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"Prix\"] > prix_inf and df.loc[i, \"Prix\"] <= prix_sup)\n",
    "    \n",
    "    # Max carotte\n",
    "    for type_carotte in rhs_values['max_carotte']:\n",
    "        rhs_carotte = rhs_values['max_carotte'][type_carotte][j]\n",
    "        sum_max_carotte = sum(carte_vars[i][j] for i in df.index\n",
    "                          if df.loc[i, \"EPD\"] == \"ENTREE\" and df.loc[i, \"Base\"] == 'LEGUME'\n",
    "                          and df.loc[i, \"Légumes\"] == type_carotte)\n",
    "    # Base Dessert\n",
    "    for type_dessert in rhs_values['base_dessert']:\n",
    "        rhs_dessert = rhs_values['base_dessert'][type_dessert][j]\n",
    "        sum_base_dessert = sum(carte_vars[k][j] for k in df.index\n",
    "                               if df.loc[k, \"EPD\"] == 'DESSERT'\n",
    "                               and df.loc[k, \"Base\"] == type_dessert)\n",
    "        solver.Add(sum_base_dessert <= rhs_dessert)\n",
    " \n",
    "\n",
    "    # Sous Proteines\n",
    "for type_sous_protein in rhs_values['sous_protein']:\n",
    "    for j in jours : \n",
    "        rhs_sous_protein = rhs_values['sous_protein'][type_sous_protein][j]\n",
    "        sum_sous_protein = sum(carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == 'PLAT' and df.loc[k, \"Sous Categ Proteine\"] == type_sous_protein)\n",
    "        solver.Add(sum_sous_protein <= rhs_sous_protein)   \n",
    "\n",
    "    # Max 2 chocolat par jour\n",
    "for j in jours : \n",
    "    sum_chocolat = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"Chocolat\"] == \"CHOCOLAT\")\n",
    "    solver.Add(sum_chocolat <= 2)\n",
    "\n",
    "    # Min 1 fromage blanc ou yaourt per day\n",
    "    sum_fromage_yaourt = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"Base\"] == \"YAOURT\")\n",
    "    solver.Add(sum_fromage_yaourt >= 1)\n",
    "\n",
    "    # 3 differentes recettes soupe maximum par jour\n",
    "    sum_soupe = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"Forme légumes\"] == 'SOUPE')\n",
    "    solver.Add(sum_soupe <= 3)\n",
    "    \n",
    "### FIN DE LA BOUCLE    \n",
    "\n",
    "# DLC min J+3 le samedi. Pas de DLC J+1 pour le vendredi et le dimanche\n",
    "for j in [4, 5, 6]:\n",
    "    if j == 5:\n",
    "        sum_dlc_saturday = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"DLC\"] < 3)\n",
    "        solver.Add(sum_dlc_saturday <= 2)\n",
    "    else:\n",
    "        sum_dlc_other = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"DLC\"] < 2)\n",
    "        solver.Add(sum_dlc_other <= 0)\n",
    "        \n",
    "# Röstis seulement le weekend\n",
    "for j in [0, 1, 2, 3, 4]:\n",
    "        sum_rostis = sum(carte_vars[i][j] for i in df.index if df.loc[i, \"EPD\"] == \"ENTREE\" and df.loc[i, \"Rostis\"] == 1)\n",
    "        solver.Add(sum_rostis == 0)\n",
    "        \n",
    "# Pas de même plat le lundi et le dimanche S-1\n",
    "sum_same_dish = sum(carte_vars[i][0] for i in df.index if df.loc[i, \"Carte Dimanche\"] == 1)\n",
    "solver.Add(sum_same_dish == 0)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "84c5b4ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#food_cost = {}\n",
    "'''\n",
    "for type_epd in ['ENTREE', 'PLAT', 'DESSERT']:\n",
    "    food_co= sum(\n",
    "        rhs_values['split_epd'][type_epd][j] * (\n",
    "            float(df.loc[i, \"FC\"]) * df.loc[i, \"PP Boostée\"] * carte_vars[i][j]\n",
    "        ) for j in jours for i in df.index if df.loc[i, \"EPD\"] == type_epd\n",
    "    )\n",
    "    food_cost[type_epd] /= sum(\n",
    "        df.loc[k, \"PP Boostée\"] * carte_vars[k][j] for k in df.index if df.loc[k, \"EPD\"] == type_epd\n",
    "    )\n",
    "'''\n",
    "\n",
    "#food_cost_expr = sum(float(df.loc[i, \"FC\"])*df.loc[i,\"PP Boostée\"] * carte_vars[i][j]*1/(sum(df.loc[k,\"PP Boostée\"] for k in df.index)) for i in df.index for j in range(7))\n",
    "food_cost_expr = sum(float(df.loc[i, \"FC\"])*df.loc[i,\"PP Boostée\"] * carte_vars[i][j] for i in df.index for j in range(7))\n",
    "solver.Maximize(food_cost_expr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d80c10eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solving with CP-SAT solver v9.7.2996\n"
     ]
    }
   ],
   "source": [
    "print(f\"Solving with {solver.SolverVersion()}\")\n",
    "status = solver.Solve()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "576d75b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The problem does not have an optimal solution.\n"
     ]
    }
   ],
   "source": [
    "if status == pywraplp.Solver.OPTIMAL:\n",
    "    print(\"Solution:\")\n",
    "    print(\"Objective value =\", solver.Objective().Value())\n",
    "\n",
    "else:\n",
    "    print(\"The problem does not have an optimal solution.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9e259cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_list = []\n",
    "for j in range(7):\n",
    "    for i in df.index:\n",
    "        if carte_vars[i][j].solution_value() == 1:\n",
    "            result_dict = {\"Day of the week\": j + 1,\n",
    "                           \"ID\": df.loc[i, 'ID'],\n",
    "                           \"Titre\": df.loc[i, 'Titre'],\n",
    "                           \"Catégorie\": df.loc[i, \"EPD\"],\n",
    "                           \"AA\": df.loc[i, \"AA\"],\n",
    "                           \"Province\": df.loc[i, \"Province\"],\n",
    "                           \"DLC\": df.loc[i, \"DLC\"],\n",
    "                           \"Regime\": df.loc[i, \"Regime\"],\n",
    "                           \"Sous Categ Protein\": df.loc[i, \"Sous Categ Proteine\"],\n",
    "                           \"Base\": df.loc[i, \"Base\"],\n",
    "                           \"Chaud/Froid\": df.loc[i, \"Chaud/Froid\"],\n",
    "                           \"F1\": df.loc[i, \"F1\"],\n",
    "                           \"F2\": df.loc[i, \"F2\"],\n",
    "                           \"F3\": df.loc[i, \"F3\"],\n",
    "                           \"FC\": df.loc[i, \"FC\"],\n",
    "                           }\n",
    "            result_list.append(result_dict)\n",
    "\n",
    "df_result = pd.DataFrame(result_list)\n",
    "\n",
    "# Print the value of each expression\n",
    "print(\"Total food cost: \", solver.Objective().Value())\n",
    "#print(\"Total penalty: \", penalty_expr.Value())\n",
    "#print(\"Total low food cost expre : \", low_foodcost_expr.Value())\n",
    "for dish, count_var in dish_count_vars.items():\n",
    "    print(f\"Dish {dish} is chosen {count_var.solution_value()} times.\")\n",
    "\n",
    "for dish, y in y_vars.items():\n",
    "    print(f\"y_{dish} is {y.solution_value()}.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f304e3aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Après avoir résolu le problème avec solver.Solve()\n",
    "\n",
    "# Afficher les valeurs des variables dish_count_vars\n",
    "for i in df.index:\n",
    "    print(f\"Dish Count for {i}: {dish_count_vars[i].solution_value()}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5019fbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write the result back to Google sheets starting from the second row\n",
    "sheet_output = doc_outil_carte.worksheet(\"Output V2\")\n",
    "#Delete the old output\n",
    "doc_outil_carte.values_clear(\"'Output V2'!C1:Q500\")\n",
    "\n",
    "#Paste the new output\n",
    "sheet_output.update('C1',[df_result.columns.values.tolist()] + df_result.values.tolist())\n",
    "sheet_output.update('A2', solver.Objective().Value())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b9d531f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
