{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "127f7532",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Titre</th>\n",
       "      <th>EPD</th>\n",
       "      <th>FC</th>\n",
       "      <th>PP</th>\n",
       "      <th>DLC</th>\n",
       "      <th>AA</th>\n",
       "      <th>AA lundi</th>\n",
       "      <th>Province</th>\n",
       "      <th>Regime</th>\n",
       "      <th>...</th>\n",
       "      <th>Chaud/Froid</th>\n",
       "      <th>Chocolat</th>\n",
       "      <th>F1</th>\n",
       "      <th>F2</th>\n",
       "      <th>F3</th>\n",
       "      <th>Prix</th>\n",
       "      <th>R</th>\n",
       "      <th>R Province</th>\n",
       "      <th>Carte Dimanche</th>\n",
       "      <th>Fromage blanc_yaourt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000001</td>\n",
       "      <td>Banana cake</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>11.6414</td>\n",
       "      <td>93.40</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>SANS_PROTEINE</td>\n",
       "      <td>...</td>\n",
       "      <td>froid</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000006</td>\n",
       "      <td>Salade d'ananas zestissime</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>9.1974</td>\n",
       "      <td>137.43</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>SANS_PROTEINE</td>\n",
       "      <td>...</td>\n",
       "      <td>froid</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000007</td>\n",
       "      <td>Pièce du boucher &amp; pommes grenailles</td>\n",
       "      <td>PLAT</td>\n",
       "      <td>17.0926</td>\n",
       "      <td>86.65</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>VIANDE</td>\n",
       "      <td>...</td>\n",
       "      <td>chaud</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12.9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000008</td>\n",
       "      <td>Compote de pommes &amp; crumble amandes</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>17.8704</td>\n",
       "      <td>99.13</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>SANS_PROTEINE</td>\n",
       "      <td>...</td>\n",
       "      <td>froid</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000009</td>\n",
       "      <td>Cake citron</td>\n",
       "      <td>DESSERT</td>\n",
       "      <td>12.3586</td>\n",
       "      <td>90.98</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>SANS_PROTEINE</td>\n",
       "      <td>...</td>\n",
       "      <td>froid</td>\n",
       "      <td></td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ID                                 Titre      EPD       FC      PP  \\\n",
       "0  1000001                           Banana cake  DESSERT  11.6414   93.40   \n",
       "1  1000006            Salade d'ananas zestissime  DESSERT   9.1974  137.43   \n",
       "2  1000007  Pièce du boucher & pommes grenailles     PLAT  17.0926   86.65   \n",
       "3  1000008   Compote de pommes & crumble amandes  DESSERT  17.8704   99.13   \n",
       "4  1000009                           Cake citron  DESSERT  12.3586   90.98   \n",
       "\n",
       "  DLC AA AA lundi Province         Regime  ... Chaud/Froid Chocolat F1 F2 F3  \\\n",
       "0   3  1        0        1  SANS_PROTEINE  ...       froid           0  0  0   \n",
       "1   3  0        0        1  SANS_PROTEINE  ...       froid           0  0  0   \n",
       "2   1  0        0        1         VIANDE  ...       chaud           0  0  0   \n",
       "3   2  0        0        1  SANS_PROTEINE  ...       froid           0  0  0   \n",
       "4   2  0        0        1  SANS_PROTEINE  ...       froid           0  0  0   \n",
       "\n",
       "   Prix  R R Province Carte Dimanche Fromage blanc_yaourt  \n",
       "0   2.9  5          1              0                    0  \n",
       "1   3.9  4          1              0                    0  \n",
       "2  12.9  1          0              0                    0  \n",
       "3   4.9  2          0              0                    0  \n",
       "4   3.5  4          0              0                    0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import all the necessaries librairies\n",
    "import pulp as p\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import gspread\n",
    "from oauth2client.service_account import ServiceAccountCredentials\n",
    "\n",
    "# connect to google sheet with the json key\n",
    "gc = gspread.service_account(filename='projectoutilcarte.json')\n",
    "\n",
    "# connect Outil Carte\n",
    "doc_outil_carte = gc.open_by_url(\"https://docs.google.com/spreadsheets/d/1SK0G02uqYSGc-FFW76IPmObNnqEfDbwYQIKR62AgKwE/\")\n",
    "sheet_outil_carte = doc_outil_carte.worksheet(\"Input\")\n",
    "sheet_parametre = doc_outil_carte.worksheet(\"Paramètres\")\n",
    "data = sheet_outil_carte.get('A2:X')\n",
    "headers = data.pop(0)\n",
    "\n",
    "# transform the data from google sheet to data frame that Python can read and display the first 15 rows of data\n",
    "df = pd.DataFrame(data, columns=headers)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3a810f4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/charlesbacquaert/anaconda3/envs/Projet_Outil_Carte/bin/glpsol\n",
      "['PULP_CBC_CMD']\n"
     ]
    }
   ],
   "source": [
    "import pulp as p\n",
    "\n",
    "solver = p.GLPK_CMD(path='/Users/charlesbacquaert/anaconda3/envs/Projet_Outil_Carte/bin/glpsol')\n",
    "\n",
    "#solver = p.GLPK()\n",
    "print(solver.available())\n",
    "\n",
    "solver_list = p.listSolvers(onlyAvailable=True)\n",
    "print(solver_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5d5604fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define input data\n",
    "df[\"ID\"] = df[\"ID\"].astype(int)\n",
    "df[\"FC\"] = df[\"FC\"].astype(float)\n",
    "df[\"DLC\"] = df[\"DLC\"].astype(int)\n",
    "df[\"AA\"] = df[\"AA\"].astype(int)\n",
    "df[\"AA lundi\"] = df[\"AA lundi\"].astype(int)\n",
    "df[\"Province\"] = df[\"Province\"].astype(int)\n",
    "df[\"Regime\"] = df[\"Regime\"].astype(str)\n",
    "df[\"Sous Categ Proteine\"] = df[\"Sous Categ Proteine\"].astype(str)\n",
    "df[\"Forme légumes\"] = df[\"Forme légumes\"].astype(str)\n",
    "df[\"Soupe equivalent\"] = df[\"Soupe equivalent\"].astype(str)\n",
    "df[\"Base\"] = df[\"Base\"].astype(str)\n",
    "df[\"Chaud/Froid\"] = df[\"Chaud/Froid\"].astype(str)\n",
    "df[\"Chocolat\"] = df[\"Chocolat\"].astype(str)\n",
    "df[\"F1\"] = df[\"F1\"].astype(int)\n",
    "df[\"F2\"] = df[\"F2\"].astype(int)\n",
    "df[\"F3\"] = df[\"F3\"].astype(int)\n",
    "df[\"Prix\"] = df[\"Prix\"].astype(float)\n",
    "df[\"R\"] = df[\"R\"].astype(int)\n",
    "df[\"R Province\"] = df[\"R Province\"].astype(int)\n",
    "df[\"Carte Dimanche\"] = df[\"Carte Dimanche\"].astype(int)\n",
    "df[\"Fromage blanc_yaourt\"] = df[\"Fromage blanc_yaourt\"].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "14b58eac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M is 10\n",
      "N is 3\n"
     ]
    }
   ],
   "source": [
    "# Define the optimization problem\n",
    "prob = p.LpProblem(\"Outil_Carte\", p.LpMinimize)\n",
    "\n",
    "# Define the decision variables\n",
    "carte_vars = p.LpVariable.dicts(\"Carte\", [(i, j) for i in df.index for j in range(7)], cat=\"Binary\")\n",
    "dish_count_vars = p.LpVariable.dicts(\"Dish_Count\", df.index, cat=\"Integer\", lowBound=0)\n",
    "\n",
    "# Define the binary varimathaables y_i\n",
    "y_vars = p.LpVariable.dicts(\"y\", df.index, cat=p.LpBinary)\n",
    "\n",
    "# Add the constraint to update dish count variables\n",
    "for i in df.index:\n",
    "    prob += dish_count_vars[i] == p.lpSum(carte_vars[(i, j)] for j in range(7))   \n",
    "    \n",
    "# Add the constraint to enforce y_vars based on dish_count_vars\n",
    "for i in df.index:\n",
    "    prob += dish_count_vars[i] <= 2 * y_vars[i]\n",
    "    prob += dish_count_vars[i] >= y_vars[i]\n",
    "\n",
    "constant_M = sheet_parametre.acell('J4').value\n",
    "constant_N = sheet_parametre.acell('J6').value\n",
    "\n",
    "M = int(constant_M)\n",
    "N = int(constant_N)\n",
    "print(\"M is\", M)\n",
    "print(\"N is\", N)\n",
    "    \n",
    "# Add the penalty term\n",
    "penalty_expr = p.lpSum(M*(dish_count_vars[i] - y_vars[i]) for i in df.index)\n",
    "R_4sem_expr = p.lpSum(N*(int(df.loc[i, \"R\"]) * carte_vars[(i, j)]) for i in df.index for j in range(7))\n",
    "R_Province_4sem_expr = p.lpSum(N*(int(df.loc[i, \"R Province\"]) * carte_vars[(i, j)]) for i in df.index for j in range(7))\n",
    "low_foodcost_expr = -0.05*(p.lpSum((float(df.loc[i, \"FC\"])) * carte_vars[(i, j)] * j for i in df.index for j in range(7)))\n",
    "\n",
    "# Define the objective function to minimize food cost and penalize dish repetition\n",
    "food_cost_expr = p.lpSum(float(df.loc[i, \"FC\"]) * carte_vars[(i, j)] for i in df.index for j in range(7))\n",
    "objective_expr = food_cost_expr + penalty_expr + R_4sem_expr + low_foodcost_expr #+ R_Province_4sem_expr\n",
    "\n",
    "# Add the objective function to the problem\n",
    "prob += objective_expr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0bafffb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<Cell R4C2 '8'>, <Cell R4C3 '8'>, <Cell R4C4 '8'>, <Cell R4C5 '8'>, <Cell R4C6 '7'>, <Cell R4C7 '5'>, <Cell R4C8 '5'>]\n",
      "[<Cell R5C2 '16'>, <Cell R5C3 '16'>, <Cell R5C4 '16'>, <Cell R5C5 '16'>, <Cell R5C6 '15'>, <Cell R5C7 '15'>, <Cell R5C8 '15'>]\n",
      "[<Cell R6C2 '6'>, <Cell R6C3 '6'>, <Cell R6C4 '6'>, <Cell R6C5 '6'>, <Cell R6C6 '5'>, <Cell R6C7 '5'>, <Cell R6C8 '5'>]\n",
      "92\n"
     ]
    }
   ],
   "source": [
    "## Input the model paramètres\n",
    "\n",
    "# Retrieve the j values from the worksheet\n",
    "j_values = sheet_parametre.range('B2:H2')  # Assumes j values are in range B2:H2\n",
    "j_values = [int(cell.value) for cell in j_values]\n",
    "\n",
    "# Retrieve the RHS values for each constraint\n",
    "constraints = ['ENTREE', 'PLAT', 'DESSERT']\n",
    "constraints_base = ['PÂTE', 'RIZ']\n",
    "constraints_formule = ['F1', 'F2', 'F3']\n",
    "\n",
    "## Define the constraints\n",
    "# No dish can be included on the menu before its expiry date : RNOK\n",
    "for i in df.index:\n",
    "    for j in range(7):\n",
    "        if (i, j) in carte_vars:\n",
    "            prob += p.lpSum(carte_vars[(i, k)] for k in range(max(0, j - df.loc[i, \"DLC\"]), j+1)) <= 1\n",
    "\n",
    "for i in range(len(constraints)):\n",
    "    constraint_name = constraints[i]\n",
    "    # Assumes RHS values start from row B4 and increment for each constraint\n",
    "    rhs_values_nb_EPD = sheet_parametre.range(f'B{i+4}:H{i+4}')  \n",
    "    print(rhs_values_nb_EPD)\n",
    "    rhs_values_AA = sheet_parametre.range(f'B{i+9}:H{i+9}')\n",
    "    rhs_values_province = sheet_parametre.range(f'B{i+14}:H{i+14}')\n",
    "    rhs_values_froid = sheet_parametre.range(f'B{i+19}:H{i+19}')\n",
    "    rhs_values_froid_province = sheet_parametre.range(f'B{i+26}:H{i+26}')\n",
    "    rhs_values_viande = sheet_parametre.range(f'B{i+31}:H{i+31}')\n",
    "    rhs_values_poisson = sheet_parametre.range(f'B{i+36}:H{i+36}')\n",
    "\n",
    "    # Nb de plats per day\n",
    "    for j in range(len(rhs_values_nb_EPD)):\n",
    "        rhs_nb_EPD = int(rhs_values_nb_EPD[j].value)\n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index \n",
    "            if df.loc[k, \"EPD\"] == constraint_name) == rhs_nb_EPD\n",
    "    \n",
    "    # Nb AA per day\n",
    "    for j in range(len(rhs_values_AA)):\n",
    "        rhs_AA = int(rhs_values_AA[j].value)\n",
    "        if j == 0:\n",
    "            prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "                if df.loc[k, \"EPD\"] == constraint_name and df.loc[k, \"AA lundi\"] == 1) >= rhs_AA\n",
    "        else :\n",
    "            prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "                if df.loc[k, \"EPD\"] == constraint_name and df.loc[k, \"AA\"] == 1) >= rhs_AA\n",
    "    \n",
    "    # Province\n",
    "    for j in range(len(rhs_values_province)):\n",
    "        rhs_province = int(rhs_values_province[j].value)  \n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == constraint_name and df.loc[k, \"Province\"] == 1) >= rhs_province      \n",
    "        \n",
    "    # Chaud/ Froid\n",
    "    for j in range(len(rhs_values_froid)):\n",
    "        rhs_froid = int(rhs_values_froid[j].value)  \n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == constraint_name \n",
    "                        and (df.loc[k, \"Chaud/Froid\"] == \"froid\" or df.loc[k, \"Chaud/Froid\"] == \"chaud/froid\")) >= rhs_froid\n",
    "        \n",
    "        rhs_froid_province = int(rhs_values_froid_province[j].value)  \n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == constraint_name and df.loc[k, \"Chaud/Froid\"] == \"chaud\" \n",
    "                        and df.loc[i, \"Province\"] == 1) >= rhs_froid_province\n",
    "        \n",
    "    #Regime\n",
    "    for j in range(len(rhs_values_viande)):\n",
    "        rhs_viande = int(rhs_values_viande[j].value)  \n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == constraint_name and df.loc[k, \"Regime\"] == \"VIANDE\") >= rhs_viande\n",
    "        \n",
    "        rhs_poisson = int(rhs_values_poisson[j].value)  \n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == constraint_name and df.loc[k, \"Regime\"] == \"POISSON\") >= rhs_poisson \n",
    "#Base\n",
    "for i in range(len(constraints_base)):\n",
    "    constraint_base_name = constraints_base[i]\n",
    "    rhs_values_base = sheet_parametre.range(f'B{i+44}:H{i+44}')\n",
    "    \n",
    "    for j in range(len(rhs_values_base)):\n",
    "        rhs_base = int(rhs_values_base[j].value)\n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k, \"Base\"] == constraint_base_name) <= rhs_base \n",
    "        \n",
    "#Formule\n",
    "for i in range(len(constraints_formule)):\n",
    "    constraint_formule_name = constraints_formule[i]\n",
    "    rhs_values_formule = sheet_parametre.range(f'B{i+48}:H{i+48}')\n",
    "    rhs_values_formule_province = sheet_parametre.range(f'B{i+53}:H{i+53}')\n",
    "    \n",
    "    for j in range(len(rhs_values_formule)):\n",
    "        rhs_formule = int(rhs_values_formule[j].value)\n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k, constraint_formule_name] == 1) >= rhs_formule\n",
    "        \n",
    "    for j in range(len(rhs_values_formule_province)):\n",
    "        rhs_formule_province = int(rhs_values_formule_province[j].value)\n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index\n",
    "            if df.loc[k, \"EPD\"] == \"PLAT\" and df.loc[k, constraint_formule_name] == 1 \n",
    "                        and df.loc[k, \"Province\"] == 1) >= rhs_formule_province\n",
    "        \n",
    "# Prix\n",
    "rhs_values_prix_69 = sheet_parametre.range('B58:H58')\n",
    "rhs_values_prix_69_8 = sheet_parametre.range('B59:H59')  \n",
    "rhs_values_prix_8_9 = sheet_parametre.range('B60:H60')   \n",
    "rhs_values_prix_9_10 = sheet_parametre.range('B61:H61')   \n",
    "\n",
    "for j in range(len(rhs_values_prix_69)):\n",
    "    rhs_prix_69 = int(rhs_values_prix_69[j].value)\n",
    "    rhs_prix_69_8 = int(rhs_values_prix_69_8[j].value)\n",
    "    rhs_prix_8_9 = int(rhs_values_prix_8_9[j].value)\n",
    "    rhs_prix_9_10 = int(rhs_values_prix_9_10[j].value)\n",
    "    \n",
    "    prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "       if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"Prix\"] <= 6.9) >= rhs_prix_69\n",
    "    prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "       if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"Prix\"] > 6.9 and df.loc[i, \"Prix\"] <= 8) >= rhs_prix_69_8\n",
    "    prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "       if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"Prix\"] > 8 and df.loc[i, \"Prix\"] <= 9) >= rhs_prix_8_9\n",
    "    prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "       if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"Prix\"] > 9 and df.loc[i, \"Prix\"] <= 10) >= rhs_prix_9_10 \n",
    "\n",
    "# DLC min J+3 for plat on saturday and sunday            \n",
    "for j in [4, 5, 6]: # Saturday or Sunday\n",
    "    if j == 4:\n",
    "        prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "            if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"DLC\"] < 2) == 0\n",
    "    else:\n",
    "        prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "            if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"DLC\"] < 2 and df.loc[i, \"AA\"] == 1) == 0\n",
    "        prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "            if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"DLC\"] < 3 and df.loc[i, \"AA\"] == 0) == 0        \n",
    "        prob += p.lpSum(carte_vars[(i, j)] for i in df.index\n",
    "            if df.loc[i, \"EPD\"] == \"PLAT\" and df.loc[i, \"DLC\"] >= 3 and df.loc[i, \"Province\"] == 1) >= 10   \n",
    "        \n",
    "# Pas de même plat le lundi et le dimanche S-1\n",
    "for j in range(7):\n",
    "    if j == 0:\n",
    "        prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "            if df.loc[i, \"Carte Dimanche\"] == 1) == 0\n",
    "\n",
    "# Max sous-categorie Protein\n",
    "sous_protein = sheet_parametre.range('A64:A84')\n",
    "sous_protein_list = [str(cell.value) for cell in sous_protein]\n",
    "constraints_sous_protein = list(set(sous_protein_list))\n",
    "\n",
    "for i in range(len(constraints_sous_protein)):\n",
    "    constraint_sous_protein_name = constraints_sous_protein[i]\n",
    "    rhs_values_sous_protein = sheet_parametre.range(f'B{i+64}:H{i+64}') \n",
    "    \n",
    "    for j in range(len(rhs_values_sous_protein)):\n",
    "        rhs_sous_protein = int(rhs_values_sous_protein[j].value)\n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index \n",
    "            if df.loc[k, \"EPD\"] == 'PLAT' \n",
    "                        and df.loc[k, \"Sous Categ Proteine\"] == constraint_sous_protein_name) <= rhs_sous_protein \n",
    "\n",
    "# Max 2 chocolat par jour\n",
    "for j in range(7):\n",
    "    prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "        if df.loc[i, \"Chocolat\"] == \"CHOCOLAT\") <= 2\n",
    "        \n",
    "# Min 1 fromage blanc ou yaourt per day\n",
    "for j in range(7):\n",
    "    prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "        if df.loc[i, \"Fromage blanc_yaourt\"] == 1) >= 1\n",
    "    \n",
    "# 3 differentes recettes soupe maximum par jour\n",
    "for j in range(7):\n",
    "    prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "        if df.loc[i, \"Forme légumes\"] == 'SOUPE') <= 3\n",
    "   \n",
    "# Retrieve the predetermined plats et jours from the worksheet\n",
    "column_A_values = sheet_parametre.col_values(1)\n",
    "# Find the index of the last non-empty cell in column A\n",
    "last_row_index_A = len(column_A_values)\n",
    "print(last_row_index_A)\n",
    "\n",
    "if last_row_index_A >= 93:\n",
    "    predetermined_plats_jour_range = sheet_parametre.range('A93:A{}'.format(last_row_index_A))\n",
    "    jour_range = sheet_parametre.range('B93:B{}'.format(last_row_index_A))\n",
    "    predetermined_plats_jour_values = [int(cell.value) for cell in predetermined_plats_jour_range]\n",
    "    jour_values = [int(cell.value) for cell in jour_range]\n",
    "\n",
    "    for predetermined_plat_jour in predetermined_plats_jour_values:\n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index for j in jour_values\n",
    "            if df.loc[k, \"ID\"] == predetermined_plat_jour) == 1 \n",
    "    \n",
    " # Retrieve the predetermined plats et fourchette de jour\n",
    "column_C_values = sheet_parametre.col_values(3)\n",
    "# Find the index of the last non-empty cell in column C\n",
    "last_row_index_C = len(column_C_values)\n",
    "\n",
    "if last_row_index_C >= 93:\n",
    "    predetermined_plats_fourchette = sheet_parametre.range('C93:C{}'.format(last_row_index_C))\n",
    "    jour_debut = sheet_parametre.range('D93:D{}'.format(last_row_index_C))\n",
    "    jour_fin = sheet_parametre.range('E93:E{}'.format(last_row_index_C))\n",
    "    predetermined_plats_fourchette_values = [int(cell.value) for cell in predetermined_plats_fourchette]\n",
    "    jour_debut_values = [int(cell.value) for cell in jour_debut]\n",
    "    jour_fin_values = [int(cell.value) for cell in jour_fin]  \n",
    "    \n",
    "    for predetermined_plat_fourchette, debut, fin in zip(predetermined_plats_fourchette_values, jour_debut_values, jour_fin_values):\n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index for j in range(debut, fin+1)\n",
    "            if df.loc[k, \"ID\"] == predetermined_plat_fourchette) >= 1 \n",
    "        prob += p.lpSum(carte_vars[(k, j)] for k in df.index for j in range(7)\n",
    "            if df.loc[k, \"ID\"] == predetermined_plat_fourchette and (j < debut or j > fin)) == 0   \n",
    "    # No more than 3 per day\n",
    "    for j in range(7):\n",
    "        prob += p.lpSum(carte_vars[(i, j)] for i in df.index \n",
    "            if df.loc[i, \"ID\"] in predetermined_plats_fourchette_values) <= 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "96693f9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GLPSOL: GLPK LP/MIP Solver, v4.65\n",
      "Parameter(s) specified in the command line:\n",
      " --cpxlp /var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/5850a5d989c04214816f0673ceb4e57d-pulp.lp\n",
      " -o /var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/5850a5d989c04214816f0673ceb4e57d-pulp.sol\n",
      "Reading problem data from '/var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/5850a5d989c04214816f0673ceb4e57d-pulp.lp'...\n",
      "5298 rows, 4402 columns, 35170 non-zeros\n",
      "4401 integer variables, 3912 of which are binary\n",
      "17154 lines were read\n",
      "GLPK Integer Optimizer, v4.65\n",
      "5298 rows, 4402 columns, 35170 non-zeros\n",
      "4401 integer variables, 3912 of which are binary\n",
      "Preprocessing...\n",
      "3261 rows, 3049 columns, 16186 non-zeros\n",
      "3049 integer variables, 2669 of which are binary\n",
      "Scaling...\n",
      " A: min|aij| =  1.000e+00  max|aij| =  2.000e+00  ratio =  2.000e+00\n",
      "Problem data seem to be well scaled\n",
      "Constructing initial basis...\n",
      "Size of triangular part is 3261\n",
      "Solving LP relaxation...\n",
      "GLPK Simplex Optimizer, v4.65\n",
      "3261 rows, 3049 columns, 16186 non-zeros\n",
      "      0: obj =   6.856206375e+03 inf =   1.231e+03 (103)\n",
      "   1168: obj =   5.327900234e+03 inf =   1.848e-14 (0) 7\n",
      "*  3634: obj =   3.726300183e+03 inf =   0.000e+00 (0) 16\n",
      "OPTIMAL LP SOLUTION FOUND\n",
      "Integer optimization begins...\n",
      "Long-step dual simplex will be used\n",
      "+  3634: mip =     not found yet >=              -inf        (1; 0)\n",
      "+  3661: >>>>>   3.726352665e+03 >=   3.726307880e+03 < 0.1% (5; 0)\n",
      "+  3664: >>>>>   3.726310575e+03 >=   3.726310575e+03   0.0% (4; 1)\n",
      "+  3664: mip =   3.726310575e+03 >=     tree is empty   0.0% (0; 9)\n",
      "INTEGER OPTIMAL SOLUTION FOUND\n",
      "Time used:   0.8 secs\n",
      "Memory used: 8.1 Mb (8468665 bytes)\n",
      "Writing MIP solution to '/var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/5850a5d989c04214816f0673ceb4e57d-pulp.sol'...\n",
      "Optimal\n"
     ]
    }
   ],
   "source": [
    "# Solve the problem\n",
    "prob.solve(solver)\n",
    "\n",
    "# Check the status of the problem\n",
    "status = p.LpStatus[prob.status]\n",
    "print(status)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c5b1d092",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective function: 3,726.31\n",
      "Total food cost:  3234.4421999999995\n",
      "Total penalty:  20\n",
      "Total low food cost expre :  -521.131625\n",
      "Dish 0 is chosen 1 times.\n",
      "Dish 1 is chosen 1 times.\n",
      "Dish 2 is chosen 1 times.\n",
      "Dish 3 is chosen 1 times.\n",
      "Dish 4 is chosen 0 times.\n",
      "Dish 5 is chosen 0 times.\n",
      "Dish 6 is chosen 0 times.\n",
      "Dish 7 is chosen 1 times.\n",
      "Dish 8 is chosen 0 times.\n",
      "Dish 9 is chosen 0 times.\n",
      "Dish 10 is chosen 1 times.\n",
      "Dish 11 is chosen 1 times.\n",
      "Dish 12 is chosen 1 times.\n",
      "Dish 13 is chosen 2 times.\n",
      "Dish 14 is chosen 0 times.\n",
      "Dish 15 is chosen 1 times.\n",
      "Dish 16 is chosen 1 times.\n",
      "Dish 17 is chosen 1 times.\n",
      "Dish 18 is chosen 0 times.\n",
      "Dish 19 is chosen 1 times.\n",
      "Dish 20 is chosen 0 times.\n",
      "Dish 21 is chosen 1 times.\n",
      "Dish 22 is chosen 0 times.\n",
      "Dish 23 is chosen 0 times.\n",
      "Dish 24 is chosen 0 times.\n",
      "Dish 25 is chosen 1 times.\n",
      "Dish 26 is chosen 1 times.\n",
      "Dish 27 is chosen 0 times.\n",
      "Dish 28 is chosen 0 times.\n",
      "Dish 29 is chosen 1 times.\n",
      "Dish 30 is chosen 1 times.\n",
      "Dish 31 is chosen 1 times.\n",
      "Dish 32 is chosen 0 times.\n",
      "Dish 33 is chosen 1 times.\n",
      "Dish 34 is chosen 1 times.\n",
      "Dish 35 is chosen 0 times.\n",
      "Dish 36 is chosen 1 times.\n",
      "Dish 37 is chosen 0 times.\n",
      "Dish 38 is chosen 1 times.\n",
      "Dish 39 is chosen 0 times.\n",
      "Dish 40 is chosen 0 times.\n",
      "Dish 41 is chosen 1 times.\n",
      "Dish 42 is chosen 1 times.\n",
      "Dish 43 is chosen 0 times.\n",
      "Dish 44 is chosen 1 times.\n",
      "Dish 45 is chosen 0 times.\n",
      "Dish 46 is chosen 0 times.\n",
      "Dish 47 is chosen 1 times.\n",
      "Dish 48 is chosen 0 times.\n",
      "Dish 49 is chosen 1 times.\n",
      "Dish 50 is chosen 0 times.\n",
      "Dish 51 is chosen 0 times.\n",
      "Dish 52 is chosen 0 times.\n",
      "Dish 53 is chosen 1 times.\n",
      "Dish 54 is chosen 0 times.\n",
      "Dish 55 is chosen 0 times.\n",
      "Dish 56 is chosen 0 times.\n",
      "Dish 57 is chosen 1 times.\n",
      "Dish 58 is chosen 0 times.\n",
      "Dish 59 is chosen 0 times.\n",
      "Dish 60 is chosen 1 times.\n",
      "Dish 61 is chosen 1 times.\n",
      "Dish 62 is chosen 0 times.\n",
      "Dish 63 is chosen 0 times.\n",
      "Dish 64 is chosen 0 times.\n",
      "Dish 65 is chosen 0 times.\n",
      "Dish 66 is chosen 0 times.\n",
      "Dish 67 is chosen 1 times.\n",
      "Dish 68 is chosen 1 times.\n",
      "Dish 69 is chosen 0 times.\n",
      "Dish 70 is chosen 1 times.\n",
      "Dish 71 is chosen 0 times.\n",
      "Dish 72 is chosen 1 times.\n",
      "Dish 73 is chosen 1 times.\n",
      "Dish 74 is chosen 1 times.\n",
      "Dish 75 is chosen 0 times.\n",
      "Dish 76 is chosen 0 times.\n",
      "Dish 77 is chosen 1 times.\n",
      "Dish 78 is chosen 1 times.\n",
      "Dish 79 is chosen 0 times.\n",
      "Dish 80 is chosen 0 times.\n",
      "Dish 81 is chosen 0 times.\n",
      "Dish 82 is chosen 0 times.\n",
      "Dish 83 is chosen 0 times.\n",
      "Dish 84 is chosen 0 times.\n",
      "Dish 85 is chosen 1 times.\n",
      "Dish 86 is chosen 0 times.\n",
      "Dish 87 is chosen 0 times.\n",
      "Dish 88 is chosen 0 times.\n",
      "Dish 89 is chosen 0 times.\n",
      "Dish 90 is chosen 1 times.\n",
      "Dish 91 is chosen 0 times.\n",
      "Dish 92 is chosen 0 times.\n",
      "Dish 93 is chosen 1 times.\n",
      "Dish 94 is chosen 0 times.\n",
      "Dish 95 is chosen 0 times.\n",
      "Dish 96 is chosen 0 times.\n",
      "Dish 97 is chosen 1 times.\n",
      "Dish 98 is chosen 1 times.\n",
      "Dish 99 is chosen 0 times.\n",
      "Dish 100 is chosen 0 times.\n",
      "Dish 101 is chosen 0 times.\n",
      "Dish 102 is chosen 0 times.\n",
      "Dish 103 is chosen 1 times.\n",
      "Dish 104 is chosen 1 times.\n",
      "Dish 105 is chosen 2 times.\n",
      "Dish 106 is chosen 1 times.\n",
      "Dish 107 is chosen 0 times.\n",
      "Dish 108 is chosen 0 times.\n",
      "Dish 109 is chosen 0 times.\n",
      "Dish 110 is chosen 0 times.\n",
      "Dish 111 is chosen 0 times.\n",
      "Dish 112 is chosen 0 times.\n",
      "Dish 113 is chosen 1 times.\n",
      "Dish 114 is chosen 0 times.\n",
      "Dish 115 is chosen 0 times.\n",
      "Dish 116 is chosen 0 times.\n",
      "Dish 117 is chosen 1 times.\n",
      "Dish 118 is chosen 1 times.\n",
      "Dish 119 is chosen 0 times.\n",
      "Dish 120 is chosen 0 times.\n",
      "Dish 121 is chosen 0 times.\n",
      "Dish 122 is chosen 0 times.\n",
      "Dish 123 is chosen 1 times.\n",
      "Dish 124 is chosen 0 times.\n",
      "Dish 125 is chosen 0 times.\n",
      "Dish 126 is chosen 0 times.\n",
      "Dish 127 is chosen 1 times.\n",
      "Dish 128 is chosen 0 times.\n",
      "Dish 129 is chosen 1 times.\n",
      "Dish 130 is chosen 0 times.\n",
      "Dish 131 is chosen 0 times.\n",
      "Dish 132 is chosen 0 times.\n",
      "Dish 133 is chosen 1 times.\n",
      "Dish 134 is chosen 0 times.\n",
      "Dish 135 is chosen 1 times.\n",
      "Dish 136 is chosen 0 times.\n",
      "Dish 137 is chosen 0 times.\n",
      "Dish 138 is chosen 1 times.\n",
      "Dish 139 is chosen 0 times.\n",
      "Dish 140 is chosen 0 times.\n",
      "Dish 141 is chosen 0 times.\n",
      "Dish 142 is chosen 0 times.\n",
      "Dish 143 is chosen 0 times.\n",
      "Dish 144 is chosen 1 times.\n",
      "Dish 145 is chosen 0 times.\n",
      "Dish 146 is chosen 1 times.\n",
      "Dish 147 is chosen 1 times.\n",
      "Dish 148 is chosen 0 times.\n",
      "Dish 149 is chosen 0 times.\n",
      "Dish 150 is chosen 1 times.\n",
      "Dish 151 is chosen 0 times.\n",
      "Dish 152 is chosen 0 times.\n",
      "Dish 153 is chosen 0 times.\n",
      "Dish 154 is chosen 0 times.\n",
      "Dish 155 is chosen 0 times.\n",
      "Dish 156 is chosen 0 times.\n",
      "Dish 157 is chosen 1 times.\n",
      "Dish 158 is chosen 0 times.\n",
      "Dish 159 is chosen 0 times.\n",
      "Dish 160 is chosen 0 times.\n",
      "Dish 161 is chosen 0 times.\n",
      "Dish 162 is chosen 0 times.\n",
      "Dish 163 is chosen 1 times.\n",
      "Dish 164 is chosen 0 times.\n",
      "Dish 165 is chosen 0 times.\n",
      "Dish 166 is chosen 1 times.\n",
      "Dish 167 is chosen 0 times.\n",
      "Dish 168 is chosen 1 times.\n",
      "Dish 169 is chosen 0 times.\n",
      "Dish 170 is chosen 1 times.\n",
      "Dish 171 is chosen 1 times.\n",
      "Dish 172 is chosen 0 times.\n",
      "Dish 173 is chosen 0 times.\n",
      "Dish 174 is chosen 1 times.\n",
      "Dish 175 is chosen 0 times.\n",
      "Dish 176 is chosen 0 times.\n",
      "Dish 177 is chosen 0 times.\n",
      "Dish 178 is chosen 0 times.\n",
      "Dish 179 is chosen 1 times.\n",
      "Dish 180 is chosen 0 times.\n",
      "Dish 181 is chosen 0 times.\n",
      "Dish 182 is chosen 0 times.\n",
      "Dish 183 is chosen 0 times.\n",
      "Dish 184 is chosen 1 times.\n",
      "Dish 185 is chosen 1 times.\n",
      "Dish 186 is chosen 0 times.\n",
      "Dish 187 is chosen 0 times.\n",
      "Dish 188 is chosen 0 times.\n",
      "Dish 189 is chosen 1 times.\n",
      "Dish 190 is chosen 1 times.\n",
      "Dish 191 is chosen 0 times.\n",
      "Dish 192 is chosen 1 times.\n",
      "Dish 193 is chosen 0 times.\n",
      "Dish 194 is chosen 1 times.\n",
      "Dish 195 is chosen 0 times.\n",
      "Dish 196 is chosen 1 times.\n",
      "Dish 197 is chosen 0 times.\n",
      "Dish 198 is chosen 0 times.\n",
      "Dish 199 is chosen 0 times.\n",
      "Dish 200 is chosen 1 times.\n",
      "Dish 201 is chosen 0 times.\n",
      "Dish 202 is chosen 0 times.\n",
      "Dish 203 is chosen 1 times.\n",
      "Dish 204 is chosen 0 times.\n",
      "Dish 205 is chosen 0 times.\n",
      "Dish 206 is chosen 0 times.\n",
      "Dish 207 is chosen 0 times.\n",
      "Dish 208 is chosen 0 times.\n",
      "Dish 209 is chosen 1 times.\n",
      "Dish 210 is chosen 1 times.\n",
      "Dish 211 is chosen 1 times.\n",
      "Dish 212 is chosen 1 times.\n",
      "Dish 213 is chosen 0 times.\n",
      "Dish 214 is chosen 0 times.\n",
      "Dish 215 is chosen 1 times.\n",
      "Dish 216 is chosen 1 times.\n",
      "Dish 217 is chosen 1 times.\n",
      "Dish 218 is chosen 1 times.\n",
      "Dish 219 is chosen 0 times.\n",
      "Dish 220 is chosen 0 times.\n",
      "Dish 221 is chosen 1 times.\n",
      "Dish 222 is chosen 0 times.\n",
      "Dish 223 is chosen 1 times.\n",
      "Dish 224 is chosen 1 times.\n",
      "Dish 225 is chosen 0 times.\n",
      "Dish 226 is chosen 0 times.\n",
      "Dish 227 is chosen 1 times.\n",
      "Dish 228 is chosen 0 times.\n",
      "Dish 229 is chosen 0 times.\n",
      "Dish 230 is chosen 0 times.\n",
      "Dish 231 is chosen 1 times.\n",
      "Dish 232 is chosen 1 times.\n",
      "Dish 233 is chosen 1 times.\n",
      "Dish 234 is chosen 0 times.\n",
      "Dish 235 is chosen 1 times.\n",
      "Dish 236 is chosen 0 times.\n",
      "Dish 237 is chosen 0 times.\n",
      "Dish 238 is chosen 1 times.\n",
      "Dish 239 is chosen 0 times.\n",
      "Dish 240 is chosen 0 times.\n",
      "Dish 241 is chosen 0 times.\n",
      "Dish 242 is chosen 0 times.\n",
      "Dish 243 is chosen 1 times.\n",
      "Dish 244 is chosen 0 times.\n",
      "Dish 245 is chosen 0 times.\n",
      "Dish 246 is chosen 1 times.\n",
      "Dish 247 is chosen 0 times.\n",
      "Dish 248 is chosen 1 times.\n",
      "Dish 249 is chosen 1 times.\n",
      "Dish 250 is chosen 1 times.\n",
      "Dish 251 is chosen 1 times.\n",
      "Dish 252 is chosen 1 times.\n",
      "Dish 253 is chosen 1 times.\n",
      "Dish 254 is chosen 0 times.\n",
      "Dish 255 is chosen 0 times.\n",
      "Dish 256 is chosen 0 times.\n",
      "Dish 257 is chosen 0 times.\n",
      "Dish 258 is chosen 1 times.\n",
      "Dish 259 is chosen 1 times.\n",
      "Dish 260 is chosen 0 times.\n",
      "Dish 261 is chosen 1 times.\n",
      "Dish 262 is chosen 1 times.\n",
      "Dish 263 is chosen 0 times.\n",
      "Dish 264 is chosen 0 times.\n",
      "Dish 265 is chosen 0 times.\n",
      "Dish 266 is chosen 0 times.\n",
      "Dish 267 is chosen 0 times.\n",
      "Dish 268 is chosen 0 times.\n",
      "Dish 269 is chosen 0 times.\n",
      "Dish 270 is chosen 1 times.\n",
      "Dish 271 is chosen 0 times.\n",
      "Dish 272 is chosen 0 times.\n",
      "Dish 273 is chosen 1 times.\n",
      "Dish 274 is chosen 1 times.\n",
      "Dish 275 is chosen 1 times.\n",
      "Dish 276 is chosen 0 times.\n",
      "Dish 277 is chosen 0 times.\n",
      "Dish 278 is chosen 0 times.\n",
      "Dish 279 is chosen 1 times.\n",
      "Dish 280 is chosen 0 times.\n",
      "Dish 281 is chosen 0 times.\n",
      "Dish 282 is chosen 0 times.\n",
      "Dish 283 is chosen 0 times.\n",
      "Dish 284 is chosen 0 times.\n",
      "Dish 285 is chosen 1 times.\n",
      "Dish 286 is chosen 0 times.\n",
      "Dish 287 is chosen 0 times.\n",
      "Dish 288 is chosen 1 times.\n",
      "Dish 289 is chosen 1 times.\n",
      "Dish 290 is chosen 1 times.\n",
      "Dish 291 is chosen 0 times.\n",
      "Dish 292 is chosen 1 times.\n",
      "Dish 293 is chosen 1 times.\n",
      "Dish 294 is chosen 1 times.\n",
      "Dish 295 is chosen 1 times.\n",
      "Dish 296 is chosen 0 times.\n",
      "Dish 297 is chosen 1 times.\n",
      "Dish 298 is chosen 0 times.\n",
      "Dish 299 is chosen 1 times.\n",
      "Dish 300 is chosen 1 times.\n",
      "Dish 301 is chosen 1 times.\n",
      "Dish 302 is chosen 0 times.\n",
      "Dish 303 is chosen 1 times.\n",
      "Dish 304 is chosen 1 times.\n",
      "Dish 305 is chosen 1 times.\n",
      "Dish 306 is chosen 0 times.\n",
      "Dish 307 is chosen 1 times.\n",
      "Dish 308 is chosen 1 times.\n",
      "Dish 309 is chosen 0 times.\n",
      "Dish 310 is chosen 1 times.\n",
      "Dish 311 is chosen 1 times.\n",
      "Dish 312 is chosen 0 times.\n",
      "Dish 313 is chosen 0 times.\n",
      "Dish 314 is chosen 0 times.\n",
      "Dish 315 is chosen 1 times.\n",
      "Dish 316 is chosen 0 times.\n",
      "Dish 317 is chosen 0 times.\n",
      "Dish 318 is chosen 0 times.\n",
      "Dish 319 is chosen 1 times.\n",
      "Dish 320 is chosen 1 times.\n",
      "Dish 321 is chosen 0 times.\n",
      "Dish 322 is chosen 1 times.\n",
      "Dish 323 is chosen 0 times.\n",
      "Dish 324 is chosen 1 times.\n",
      "Dish 325 is chosen 0 times.\n",
      "Dish 326 is chosen 0 times.\n",
      "Dish 327 is chosen 0 times.\n",
      "Dish 328 is chosen 0 times.\n",
      "Dish 329 is chosen 1 times.\n",
      "Dish 330 is chosen 0 times.\n",
      "Dish 331 is chosen 0 times.\n",
      "Dish 332 is chosen 1 times.\n",
      "Dish 333 is chosen 1 times.\n",
      "Dish 334 is chosen 1 times.\n",
      "Dish 335 is chosen 0 times.\n",
      "Dish 336 is chosen 0 times.\n",
      "Dish 337 is chosen 0 times.\n",
      "Dish 338 is chosen 0 times.\n",
      "Dish 339 is chosen 0 times.\n",
      "Dish 340 is chosen 0 times.\n",
      "Dish 341 is chosen 0 times.\n",
      "Dish 342 is chosen 0 times.\n",
      "Dish 343 is chosen 1 times.\n",
      "Dish 344 is chosen 1 times.\n",
      "Dish 345 is chosen 1 times.\n",
      "Dish 346 is chosen 1 times.\n",
      "Dish 347 is chosen 0 times.\n",
      "Dish 348 is chosen 1 times.\n",
      "Dish 349 is chosen 1 times.\n",
      "Dish 350 is chosen 0 times.\n",
      "Dish 351 is chosen 0 times.\n",
      "Dish 352 is chosen 1 times.\n",
      "Dish 353 is chosen 1 times.\n",
      "Dish 354 is chosen 0 times.\n",
      "Dish 355 is chosen 0 times.\n",
      "Dish 356 is chosen 1 times.\n",
      "Dish 357 is chosen 1 times.\n",
      "Dish 358 is chosen 1 times.\n",
      "Dish 359 is chosen 1 times.\n",
      "Dish 360 is chosen 1 times.\n",
      "Dish 361 is chosen 1 times.\n",
      "Dish 362 is chosen 0 times.\n",
      "Dish 363 is chosen 0 times.\n",
      "Dish 364 is chosen 1 times.\n",
      "Dish 365 is chosen 0 times.\n",
      "Dish 366 is chosen 0 times.\n",
      "Dish 367 is chosen 1 times.\n",
      "Dish 368 is chosen 0 times.\n",
      "Dish 369 is chosen 0 times.\n",
      "Dish 370 is chosen 0 times.\n",
      "Dish 371 is chosen 0 times.\n",
      "Dish 372 is chosen 0 times.\n",
      "Dish 373 is chosen 0 times.\n",
      "Dish 374 is chosen 0 times.\n",
      "Dish 375 is chosen 0 times.\n",
      "Dish 376 is chosen 0 times.\n",
      "Dish 377 is chosen 0 times.\n",
      "Dish 378 is chosen 1 times.\n",
      "Dish 379 is chosen 0 times.\n",
      "Dish 380 is chosen 1 times.\n",
      "Dish 381 is chosen 1 times.\n",
      "Dish 382 is chosen 1 times.\n",
      "Dish 383 is chosen 1 times.\n",
      "Dish 384 is chosen 0 times.\n",
      "Dish 385 is chosen 1 times.\n",
      "Dish 386 is chosen 0 times.\n",
      "Dish 387 is chosen 0 times.\n",
      "Dish 388 is chosen 1 times.\n",
      "Dish 389 is chosen 0 times.\n",
      "Dish 390 is chosen 0 times.\n",
      "Dish 391 is chosen 1 times.\n",
      "Dish 392 is chosen 0 times.\n",
      "Dish 393 is chosen 1 times.\n",
      "Dish 394 is chosen 1 times.\n",
      "Dish 395 is chosen 0 times.\n",
      "Dish 396 is chosen 0 times.\n",
      "Dish 397 is chosen 1 times.\n",
      "Dish 398 is chosen 0 times.\n",
      "Dish 399 is chosen 1 times.\n",
      "Dish 400 is chosen 1 times.\n",
      "Dish 401 is chosen 0 times.\n",
      "Dish 402 is chosen 0 times.\n",
      "Dish 403 is chosen 1 times.\n",
      "Dish 404 is chosen 0 times.\n",
      "Dish 405 is chosen 0 times.\n",
      "Dish 406 is chosen 0 times.\n",
      "Dish 407 is chosen 0 times.\n",
      "Dish 408 is chosen 0 times.\n",
      "Dish 409 is chosen 1 times.\n",
      "Dish 410 is chosen 1 times.\n",
      "Dish 411 is chosen 0 times.\n",
      "Dish 412 is chosen 1 times.\n",
      "Dish 413 is chosen 0 times.\n",
      "Dish 414 is chosen 1 times.\n",
      "Dish 415 is chosen 1 times.\n",
      "Dish 416 is chosen 1 times.\n",
      "Dish 417 is chosen 1 times.\n",
      "Dish 418 is chosen 0 times.\n",
      "Dish 419 is chosen 0 times.\n",
      "Dish 420 is chosen 0 times.\n",
      "Dish 421 is chosen 0 times.\n",
      "Dish 422 is chosen 0 times.\n",
      "Dish 423 is chosen 0 times.\n",
      "Dish 424 is chosen 0 times.\n",
      "Dish 425 is chosen 0 times.\n",
      "Dish 426 is chosen 1 times.\n",
      "Dish 427 is chosen 1 times.\n",
      "Dish 428 is chosen 1 times.\n",
      "Dish 429 is chosen 0 times.\n",
      "Dish 430 is chosen 1 times.\n",
      "Dish 431 is chosen 0 times.\n",
      "Dish 432 is chosen 1 times.\n",
      "Dish 433 is chosen 0 times.\n",
      "Dish 434 is chosen 0 times.\n",
      "Dish 435 is chosen 0 times.\n",
      "Dish 436 is chosen 0 times.\n",
      "Dish 437 is chosen 0 times.\n",
      "Dish 438 is chosen 0 times.\n",
      "Dish 439 is chosen 0 times.\n",
      "Dish 440 is chosen 0 times.\n",
      "Dish 441 is chosen 1 times.\n",
      "Dish 442 is chosen 0 times.\n",
      "Dish 443 is chosen 0 times.\n",
      "Dish 444 is chosen 0 times.\n",
      "Dish 445 is chosen 0 times.\n",
      "Dish 446 is chosen 0 times.\n",
      "Dish 447 is chosen 1 times.\n",
      "Dish 448 is chosen 0 times.\n",
      "Dish 449 is chosen 0 times.\n",
      "Dish 450 is chosen 0 times.\n",
      "Dish 451 is chosen 1 times.\n",
      "Dish 452 is chosen 1 times.\n",
      "Dish 453 is chosen 0 times.\n",
      "Dish 454 is chosen 1 times.\n",
      "Dish 455 is chosen 0 times.\n",
      "Dish 456 is chosen 1 times.\n",
      "Dish 457 is chosen 0 times.\n",
      "Dish 458 is chosen 0 times.\n",
      "Dish 459 is chosen 0 times.\n",
      "Dish 460 is chosen 0 times.\n",
      "Dish 461 is chosen 0 times.\n",
      "Dish 462 is chosen 0 times.\n",
      "Dish 463 is chosen 0 times.\n",
      "Dish 464 is chosen 0 times.\n",
      "Dish 465 is chosen 0 times.\n",
      "Dish 466 is chosen 0 times.\n",
      "Dish 467 is chosen 0 times.\n",
      "Dish 468 is chosen 1 times.\n",
      "Dish 469 is chosen 0 times.\n",
      "Dish 470 is chosen 0 times.\n",
      "Dish 471 is chosen 0 times.\n",
      "Dish 472 is chosen 1 times.\n",
      "Dish 473 is chosen 0 times.\n",
      "Dish 474 is chosen 0 times.\n",
      "Dish 475 is chosen 0 times.\n",
      "Dish 476 is chosen 0 times.\n",
      "Dish 477 is chosen 0 times.\n",
      "Dish 478 is chosen 0 times.\n",
      "Dish 479 is chosen 0 times.\n",
      "Dish 480 is chosen 1 times.\n",
      "Dish 481 is chosen 1 times.\n",
      "Dish 482 is chosen 0 times.\n",
      "Dish 483 is chosen 0 times.\n",
      "Dish 484 is chosen 0 times.\n",
      "Dish 485 is chosen 0 times.\n",
      "Dish 486 is chosen 0 times.\n",
      "Dish 487 is chosen 1 times.\n",
      "Dish 488 is chosen 1 times.\n",
      "y_0 is 1.\n",
      "y_1 is 1.\n",
      "y_2 is 1.\n",
      "y_3 is 1.\n",
      "y_4 is 0.\n",
      "y_5 is 0.\n",
      "y_6 is 0.\n",
      "y_7 is 1.\n",
      "y_8 is 0.\n",
      "y_9 is 0.\n",
      "y_10 is 1.\n",
      "y_11 is 1.\n",
      "y_12 is 1.\n",
      "y_13 is 1.\n",
      "y_14 is 0.\n",
      "y_15 is 1.\n",
      "y_16 is 1.\n",
      "y_17 is 1.\n",
      "y_18 is 0.\n",
      "y_19 is 1.\n",
      "y_20 is 0.\n",
      "y_21 is 1.\n",
      "y_22 is 0.\n",
      "y_23 is 0.\n",
      "y_24 is 0.\n",
      "y_25 is 1.\n",
      "y_26 is 1.\n",
      "y_27 is 0.\n",
      "y_28 is 0.\n",
      "y_29 is 1.\n",
      "y_30 is 1.\n",
      "y_31 is 1.\n",
      "y_32 is 0.\n",
      "y_33 is 1.\n",
      "y_34 is 1.\n",
      "y_35 is 0.\n",
      "y_36 is 1.\n",
      "y_37 is 0.\n",
      "y_38 is 1.\n",
      "y_39 is 0.\n",
      "y_40 is 0.\n",
      "y_41 is 1.\n",
      "y_42 is 1.\n",
      "y_43 is 0.\n",
      "y_44 is 1.\n",
      "y_45 is 0.\n",
      "y_46 is 0.\n",
      "y_47 is 1.\n",
      "y_48 is 0.\n",
      "y_49 is 1.\n",
      "y_50 is 0.\n",
      "y_51 is 0.\n",
      "y_52 is 0.\n",
      "y_53 is 1.\n",
      "y_54 is 0.\n",
      "y_55 is 0.\n",
      "y_56 is 0.\n",
      "y_57 is 1.\n",
      "y_58 is 0.\n",
      "y_59 is 0.\n",
      "y_60 is 1.\n",
      "y_61 is 1.\n",
      "y_62 is 0.\n",
      "y_63 is 0.\n",
      "y_64 is 0.\n",
      "y_65 is 0.\n",
      "y_66 is 0.\n",
      "y_67 is 1.\n",
      "y_68 is 1.\n",
      "y_69 is 0.\n",
      "y_70 is 1.\n",
      "y_71 is 0.\n",
      "y_72 is 1.\n",
      "y_73 is 1.\n",
      "y_74 is 1.\n",
      "y_75 is 0.\n",
      "y_76 is 0.\n",
      "y_77 is 1.\n",
      "y_78 is 1.\n",
      "y_79 is 0.\n",
      "y_80 is 0.\n",
      "y_81 is 0.\n",
      "y_82 is 0.\n",
      "y_83 is 0.\n",
      "y_84 is 0.\n",
      "y_85 is 1.\n",
      "y_86 is 0.\n",
      "y_87 is 0.\n",
      "y_88 is 0.\n",
      "y_89 is 0.\n",
      "y_90 is 1.\n",
      "y_91 is 0.\n",
      "y_92 is 0.\n",
      "y_93 is 1.\n",
      "y_94 is 0.\n",
      "y_95 is 0.\n",
      "y_96 is 0.\n",
      "y_97 is 1.\n",
      "y_98 is 1.\n",
      "y_99 is 0.\n",
      "y_100 is 0.\n",
      "y_101 is 0.\n",
      "y_102 is 0.\n",
      "y_103 is 1.\n",
      "y_104 is 1.\n",
      "y_105 is 1.\n",
      "y_106 is 1.\n",
      "y_107 is 0.\n",
      "y_108 is 0.\n",
      "y_109 is 0.\n",
      "y_110 is 0.\n",
      "y_111 is 0.\n",
      "y_112 is 0.\n",
      "y_113 is 1.\n",
      "y_114 is 0.\n",
      "y_115 is 0.\n",
      "y_116 is 0.\n",
      "y_117 is 1.\n",
      "y_118 is 1.\n",
      "y_119 is 0.\n",
      "y_120 is 0.\n",
      "y_121 is 0.\n",
      "y_122 is 0.\n",
      "y_123 is 1.\n",
      "y_124 is 0.\n",
      "y_125 is 0.\n",
      "y_126 is 0.\n",
      "y_127 is 1.\n",
      "y_128 is 0.\n",
      "y_129 is 1.\n",
      "y_130 is 0.\n",
      "y_131 is 0.\n",
      "y_132 is 0.\n",
      "y_133 is 1.\n",
      "y_134 is 0.\n",
      "y_135 is 1.\n",
      "y_136 is 0.\n",
      "y_137 is 0.\n",
      "y_138 is 1.\n",
      "y_139 is 0.\n",
      "y_140 is 0.\n",
      "y_141 is 0.\n",
      "y_142 is 0.\n",
      "y_143 is 0.\n",
      "y_144 is 1.\n",
      "y_145 is 0.\n",
      "y_146 is 1.\n",
      "y_147 is 1.\n",
      "y_148 is 0.\n",
      "y_149 is 0.\n",
      "y_150 is 1.\n",
      "y_151 is 0.\n",
      "y_152 is 0.\n",
      "y_153 is 0.\n",
      "y_154 is 0.\n",
      "y_155 is 0.\n",
      "y_156 is 0.\n",
      "y_157 is 1.\n",
      "y_158 is 0.\n",
      "y_159 is 0.\n",
      "y_160 is 0.\n",
      "y_161 is 0.\n",
      "y_162 is 0.\n",
      "y_163 is 1.\n",
      "y_164 is 0.\n",
      "y_165 is 0.\n",
      "y_166 is 1.\n",
      "y_167 is 0.\n",
      "y_168 is 1.\n",
      "y_169 is 0.\n",
      "y_170 is 1.\n",
      "y_171 is 1.\n",
      "y_172 is 0.\n",
      "y_173 is 0.\n",
      "y_174 is 1.\n",
      "y_175 is 0.\n",
      "y_176 is 0.\n",
      "y_177 is 0.\n",
      "y_178 is 0.\n",
      "y_179 is 1.\n",
      "y_180 is 0.\n",
      "y_181 is 0.\n",
      "y_182 is 0.\n",
      "y_183 is 0.\n",
      "y_184 is 1.\n",
      "y_185 is 1.\n",
      "y_186 is 0.\n",
      "y_187 is 0.\n",
      "y_188 is 0.\n",
      "y_189 is 1.\n",
      "y_190 is 1.\n",
      "y_191 is 0.\n",
      "y_192 is 1.\n",
      "y_193 is 0.\n",
      "y_194 is 1.\n",
      "y_195 is 0.\n",
      "y_196 is 1.\n",
      "y_197 is 0.\n",
      "y_198 is 0.\n",
      "y_199 is 0.\n",
      "y_200 is 1.\n",
      "y_201 is 0.\n",
      "y_202 is 0.\n",
      "y_203 is 1.\n",
      "y_204 is 0.\n",
      "y_205 is 0.\n",
      "y_206 is 0.\n",
      "y_207 is 0.\n",
      "y_208 is 0.\n",
      "y_209 is 1.\n",
      "y_210 is 1.\n",
      "y_211 is 1.\n",
      "y_212 is 1.\n",
      "y_213 is 0.\n",
      "y_214 is 0.\n",
      "y_215 is 1.\n",
      "y_216 is 1.\n",
      "y_217 is 1.\n",
      "y_218 is 1.\n",
      "y_219 is 0.\n",
      "y_220 is 0.\n",
      "y_221 is 1.\n",
      "y_222 is 0.\n",
      "y_223 is 1.\n",
      "y_224 is 1.\n",
      "y_225 is 0.\n",
      "y_226 is 0.\n",
      "y_227 is 1.\n",
      "y_228 is 0.\n",
      "y_229 is 0.\n",
      "y_230 is 0.\n",
      "y_231 is 1.\n",
      "y_232 is 1.\n",
      "y_233 is 1.\n",
      "y_234 is 0.\n",
      "y_235 is 1.\n",
      "y_236 is 0.\n",
      "y_237 is 0.\n",
      "y_238 is 1.\n",
      "y_239 is 0.\n",
      "y_240 is 0.\n",
      "y_241 is 0.\n",
      "y_242 is 0.\n",
      "y_243 is 1.\n",
      "y_244 is 0.\n",
      "y_245 is 0.\n",
      "y_246 is 1.\n",
      "y_247 is 0.\n",
      "y_248 is 1.\n",
      "y_249 is 1.\n",
      "y_250 is 1.\n",
      "y_251 is 1.\n",
      "y_252 is 1.\n",
      "y_253 is 1.\n",
      "y_254 is 0.\n",
      "y_255 is 0.\n",
      "y_256 is 0.\n",
      "y_257 is 0.\n",
      "y_258 is 1.\n",
      "y_259 is 1.\n",
      "y_260 is 0.\n",
      "y_261 is 1.\n",
      "y_262 is 1.\n",
      "y_263 is 0.\n",
      "y_264 is 0.\n",
      "y_265 is 0.\n",
      "y_266 is 0.\n",
      "y_267 is 0.\n",
      "y_268 is 0.\n",
      "y_269 is 0.\n",
      "y_270 is 1.\n",
      "y_271 is 0.\n",
      "y_272 is 0.\n",
      "y_273 is 1.\n",
      "y_274 is 1.\n",
      "y_275 is 1.\n",
      "y_276 is 0.\n",
      "y_277 is 0.\n",
      "y_278 is 0.\n",
      "y_279 is 1.\n",
      "y_280 is 0.\n",
      "y_281 is 0.\n",
      "y_282 is 0.\n",
      "y_283 is 0.\n",
      "y_284 is 0.\n",
      "y_285 is 1.\n",
      "y_286 is 0.\n",
      "y_287 is 0.\n",
      "y_288 is 1.\n",
      "y_289 is 1.\n",
      "y_290 is 1.\n",
      "y_291 is 0.\n",
      "y_292 is 1.\n",
      "y_293 is 1.\n",
      "y_294 is 1.\n",
      "y_295 is 1.\n",
      "y_296 is 0.\n",
      "y_297 is 1.\n",
      "y_298 is 0.\n",
      "y_299 is 1.\n",
      "y_300 is 1.\n",
      "y_301 is 1.\n",
      "y_302 is 0.\n",
      "y_303 is 1.\n",
      "y_304 is 1.\n",
      "y_305 is 1.\n",
      "y_306 is 0.\n",
      "y_307 is 1.\n",
      "y_308 is 1.\n",
      "y_309 is 0.\n",
      "y_310 is 1.\n",
      "y_311 is 1.\n",
      "y_312 is 0.\n",
      "y_313 is 0.\n",
      "y_314 is 0.\n",
      "y_315 is 1.\n",
      "y_316 is 0.\n",
      "y_317 is 0.\n",
      "y_318 is 0.\n",
      "y_319 is 1.\n",
      "y_320 is 1.\n",
      "y_321 is 0.\n",
      "y_322 is 1.\n",
      "y_323 is 0.\n",
      "y_324 is 1.\n",
      "y_325 is 0.\n",
      "y_326 is 0.\n",
      "y_327 is 0.\n",
      "y_328 is 0.\n",
      "y_329 is 1.\n",
      "y_330 is 0.\n",
      "y_331 is 0.\n",
      "y_332 is 1.\n",
      "y_333 is 1.\n",
      "y_334 is 1.\n",
      "y_335 is 0.\n",
      "y_336 is 0.\n",
      "y_337 is 0.\n",
      "y_338 is 0.\n",
      "y_339 is 0.\n",
      "y_340 is 0.\n",
      "y_341 is 0.\n",
      "y_342 is 0.\n",
      "y_343 is 1.\n",
      "y_344 is 1.\n",
      "y_345 is 1.\n",
      "y_346 is 1.\n",
      "y_347 is 0.\n",
      "y_348 is 1.\n",
      "y_349 is 1.\n",
      "y_350 is 0.\n",
      "y_351 is 0.\n",
      "y_352 is 1.\n",
      "y_353 is 1.\n",
      "y_354 is 0.\n",
      "y_355 is 0.\n",
      "y_356 is 1.\n",
      "y_357 is 1.\n",
      "y_358 is 1.\n",
      "y_359 is 1.\n",
      "y_360 is 1.\n",
      "y_361 is 1.\n",
      "y_362 is 0.\n",
      "y_363 is 0.\n",
      "y_364 is 1.\n",
      "y_365 is 0.\n",
      "y_366 is 0.\n",
      "y_367 is 1.\n",
      "y_368 is 0.\n",
      "y_369 is 0.\n",
      "y_370 is 0.\n",
      "y_371 is 0.\n",
      "y_372 is 0.\n",
      "y_373 is 0.\n",
      "y_374 is 0.\n",
      "y_375 is 0.\n",
      "y_376 is 0.\n",
      "y_377 is 0.\n",
      "y_378 is 1.\n",
      "y_379 is 0.\n",
      "y_380 is 1.\n",
      "y_381 is 1.\n",
      "y_382 is 1.\n",
      "y_383 is 1.\n",
      "y_384 is 0.\n",
      "y_385 is 1.\n",
      "y_386 is 0.\n",
      "y_387 is 0.\n",
      "y_388 is 1.\n",
      "y_389 is 0.\n",
      "y_390 is 0.\n",
      "y_391 is 1.\n",
      "y_392 is 0.\n",
      "y_393 is 1.\n",
      "y_394 is 1.\n",
      "y_395 is 0.\n",
      "y_396 is 0.\n",
      "y_397 is 1.\n",
      "y_398 is 0.\n",
      "y_399 is 1.\n",
      "y_400 is 1.\n",
      "y_401 is 0.\n",
      "y_402 is 0.\n",
      "y_403 is 1.\n",
      "y_404 is 0.\n",
      "y_405 is 0.\n",
      "y_406 is 0.\n",
      "y_407 is 0.\n",
      "y_408 is 0.\n",
      "y_409 is 1.\n",
      "y_410 is 1.\n",
      "y_411 is 0.\n",
      "y_412 is 1.\n",
      "y_413 is 0.\n",
      "y_414 is 1.\n",
      "y_415 is 1.\n",
      "y_416 is 1.\n",
      "y_417 is 1.\n",
      "y_418 is 0.\n",
      "y_419 is 0.\n",
      "y_420 is 0.\n",
      "y_421 is 0.\n",
      "y_422 is 0.\n",
      "y_423 is 0.\n",
      "y_424 is 0.\n",
      "y_425 is 0.\n",
      "y_426 is 1.\n",
      "y_427 is 1.\n",
      "y_428 is 1.\n",
      "y_429 is 0.\n",
      "y_430 is 1.\n",
      "y_431 is 0.\n",
      "y_432 is 1.\n",
      "y_433 is 0.\n",
      "y_434 is 0.\n",
      "y_435 is 0.\n",
      "y_436 is 0.\n",
      "y_437 is 0.\n",
      "y_438 is 0.\n",
      "y_439 is 0.\n",
      "y_440 is 0.\n",
      "y_441 is 1.\n",
      "y_442 is 0.\n",
      "y_443 is 0.\n",
      "y_444 is 0.\n",
      "y_445 is 0.\n",
      "y_446 is 0.\n",
      "y_447 is 1.\n",
      "y_448 is 0.\n",
      "y_449 is 0.\n",
      "y_450 is 0.\n",
      "y_451 is 1.\n",
      "y_452 is 1.\n",
      "y_453 is 0.\n",
      "y_454 is 1.\n",
      "y_455 is 0.\n",
      "y_456 is 1.\n",
      "y_457 is 0.\n",
      "y_458 is 0.\n",
      "y_459 is 0.\n",
      "y_460 is 0.\n",
      "y_461 is 0.\n",
      "y_462 is 0.\n",
      "y_463 is 0.\n",
      "y_464 is 0.\n",
      "y_465 is 0.\n",
      "y_466 is 0.\n",
      "y_467 is 0.\n",
      "y_468 is 1.\n",
      "y_469 is 0.\n",
      "y_470 is 0.\n",
      "y_471 is 0.\n",
      "y_472 is 1.\n",
      "y_473 is 0.\n",
      "y_474 is 0.\n",
      "y_475 is 0.\n",
      "y_476 is 0.\n",
      "y_477 is 0.\n",
      "y_478 is 0.\n",
      "y_479 is 0.\n",
      "y_480 is 1.\n",
      "y_481 is 1.\n",
      "y_482 is 0.\n",
      "y_483 is 0.\n",
      "y_484 is 0.\n",
      "y_485 is 0.\n",
      "y_486 is 0.\n",
      "y_487 is 1.\n",
      "y_488 is 1.\n"
     ]
    }
   ],
   "source": [
    "# Print the optimal total food cost\n",
    "print(f\"Objective function: {p.value(prob.objective):,.2f}\")\n",
    "\n",
    "# Print the optimal menu for each day\n",
    "result_list = [] \n",
    "for j in range(7):\n",
    "    for i in df.index:\n",
    "        if carte_vars[(i, j)].varValue == 1:\n",
    "            result_dict = {\"Day of the week \" : j+1,\n",
    "                          \"ID\" : df.loc[i, 'ID'],\n",
    "                           \"Titre\" : df.loc[i, 'Titre'],\n",
    "                          \"Catégorie\" : df.loc[i, \"EPD\"],\n",
    "                          \"AA\" : df.loc[i, \"AA\"],\n",
    "                          \"Province\" : df.loc[i, \"Province\"],\n",
    "                          \"DLC\" : df.loc[i, \"DLC\"],\n",
    "                          \"Regime\" : df.loc[i, \"Regime\"],\n",
    "                           \"Sous Categ Protein\" : df.loc[i, \"Sous Categ Proteine\"],\n",
    "                           \"Base\" : df.loc[i, \"Base\"],\n",
    "                           \"Chaud/Froid\" : df.loc[i, \"Chaud/Froid\"],\n",
    "                           \"F1\" : df.loc[i, \"F1\"],\n",
    "                           \"F2\" : df.loc[i, \"F2\"],\n",
    "                           \"F3\" : df.loc[i, \"F3\"],\n",
    "                           \"FC\" : df.loc[i, \"FC\"],\n",
    "                          }\n",
    "            result_list.append(result_dict)\n",
    "\n",
    "df_result = pd.concat([pd.DataFrame(dict_ID, index=[0]) for dict_ID in result_list], ignore_index=True)\n",
    "\n",
    "# Print the value of each expression\n",
    "print(\"Total food cost: \", p.value(food_cost_expr))\n",
    "print(\"Total penalty: \", p.value(penalty_expr))\n",
    "print(\"Total low food cost expre : \", p.value(low_foodcost_expr))\n",
    "for dish, count_var in dish_count_vars.items():\n",
    "    print(f\"Dish {dish} is chosen {count_var.value()} times.\")\n",
    "    \n",
    "for dish, y in y_vars.items():\n",
    "    print(f\"y_{dish} is {y.value()}.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d0f2be88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'spreadsheetId': '1SK0G02uqYSGc-FFW76IPmObNnqEfDbwYQIKR62AgKwE',\n",
       " 'updatedRange': 'Output!A2',\n",
       " 'updatedRows': 1,\n",
       " 'updatedColumns': 1,\n",
       " 'updatedCells': 1}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write the result back to Google sheets starting from the second row\n",
    "sheet_output = doc_outil_carte.worksheet(\"Output\")\n",
    "#Delete the old output\n",
    "doc_outil_carte.values_clear(\"Output!C1:Q500\")\n",
    "\n",
    "#Paste the new output\n",
    "sheet_output.update('C1',[df_result.columns.values.tolist()] + df_result.values.tolist())\n",
    "sheet_output.update('A2', f\"{p.value(food_cost_expr):,.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41ab8704",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
