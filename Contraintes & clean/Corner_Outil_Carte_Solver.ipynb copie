{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a42f241d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import all the necessaries librairies\n",
    "import pulp as p\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import gspread\n",
    "from oauth2client.service_account import ServiceAccountCredentials"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3a810f4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/charlesbacquaert/anaconda3/envs/Projet_Corners_Outil_Carte/bin/glpsol\n",
      "['PULP_CBC_CMD']\n"
     ]
    }
   ],
   "source": [
    "# import solver\n",
    "solver = p.GLPK_CMD(path='/Users/charlesbacquaert/anaconda3/envs/Projet_Corners_Outil_Carte/bin/glpsol')\n",
    "\n",
    "#solver = p.GLPK()\n",
    "print(solver.available())\n",
    "\n",
    "solver_list = p.listSolvers(onlyAvailable=True)\n",
    "print(solver_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "127f7532",
   "metadata": {},
   "outputs": [],
   "source": [
    "# connect to google sheet with the json key\n",
    "gc = gspread.service_account(filename='projetcorneroutilcarte-8eff842e6082.json')\n",
    "\n",
    "# connect Sheets of EPD available and constraints\n",
    "doc_outil_carte = gc.open_by_url(\"https://docs.google.com/spreadsheets/d/1wGohQGY_qV9f1dyeNQm9n6S7PVnNnTCC-QKybBPsw5U/\")\n",
    "sheet_outil_carte = doc_outil_carte.worksheet(\"Input\")\n",
    "sheet_contraintes_jours = doc_outil_carte.worksheet(\"Contraintes Jours\")\n",
    "sheet_contraintes_sous_categories = doc_outil_carte.worksheet(\"Contraintes Sous Categories\")\n",
    "sheet_contraintes_particulieres = doc_outil_carte.worksheet(\"Contraintes Particulieres\")\n",
    "sheet_contraintes_parametres = doc_outil_carte.worksheet(\"Contraintes Paramètres\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f274cee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M is 17\n",
      "N is 5\n"
     ]
    }
   ],
   "source": [
    "# import constants\n",
    "constant_M = sheet_contraintes_parametres.acell('D2').value\n",
    "constant_N = sheet_contraintes_parametres.acell('D4').value\n",
    "\n",
    "M = int(constant_M)\n",
    "N = int(constant_N)\n",
    "\n",
    "print(\"M is\", M)\n",
    "print(\"N is\", N)\n",
    "\n",
    "# create constants \n",
    "EPD = [\"ENTREE\",\"PLAT\",\"DESSERT\"]\n",
    "JOURS = [\"Lundi\",\"Mardi\",\"Mercredi\",\"Jeudi\",\"Vendredi\",\"Samedi\",\"Dimanche\"] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3d78fb37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ID', 'Titre', 'Fournisseur', 'EPD', 'Sous Categorie Corner', 'FC',\n",
      "       'PP semaine', 'PP week-end', 'DLC', ' Prix', 'AA', 'AA lundi',\n",
      "       'Province', 'Regime', 'Sous Categ Proteine', 'Forme légumes',\n",
      "       'Soupe equivalent', 'Base', 'Chaud/Froid', 'Chocolat', 'F1', 'F2', 'F3',\n",
      "       'R', 'R Province', 'Carte Dimanche', 'Fromage blanc_yaourt',\n",
      "       'Times chosen'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# import input data \n",
    "data = sheet_outil_carte.get('A2:AB')\n",
    "headers = data.pop(0)\n",
    "\n",
    "# transform the data from google sheet to data frame that Python can read and display the first rows of data\n",
    "df = pd.DataFrame(data, columns=headers)\n",
    "print(df.columns)\n",
    "#print(df.head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5d5604fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define input data\n",
    "\n",
    "# useful, data in Input\n",
    "df[\"ID\"].replace('', np.nan, inplace=True)\n",
    "df.dropna(subset=[\"ID\"], inplace=True)\n",
    "df[\"ID\"] = df[\"ID\"].astype(int)\n",
    "df[\"Fournisseur\"]=df[\"Fournisseur\"].astype(str)\n",
    "df[\"EPD\"]=df[\"EPD\"].astype(str)\n",
    "df[\"Sous Categorie Corner\"]=df[\"Sous Categorie Corner\"].astype(str)\n",
    "df[\"DLC\"] = df[\"DLC\"].astype(int)\n",
    "df[\"R\"] = df[\"R\"].astype(int)\n",
    "df[\"FC\"] = df[\"FC\"].astype(float)\n",
    "\n",
    "# useless, data in Input \n",
    "\n",
    "df[\"PP semaine\"]=df[\"PP semaine\"].astype(str) #str au lieu de float \n",
    "df[\"PP week-end\"]=df[\"PP week-end\"].astype(str) #str au lieu de float\n",
    "df[\"AA\"] = df[\"AA\"].astype(int)\n",
    "df[\" Prix\"] = df[\" Prix\"].astype(str) # str au lieu de float\n",
    "df[\"AA lundi\"] = df[\"AA lundi\"].astype(int)\n",
    "df[\"Province\"] = df[\"Province\"].astype(int)\n",
    "df[\"Regime\"] = df[\"Regime\"].astype(str)\n",
    "df[\"Sous Categ Proteine\"] = df[\"Sous Categ Proteine\"].astype(str)\n",
    "df[\"Forme légumes\"] = df[\"Forme légumes\"].astype(str)\n",
    "df[\"Soupe equivalent\"] = df[\"Soupe equivalent\"].astype(str)\n",
    "df[\"Base\"] = df[\"Base\"].astype(str)\n",
    "df[\"Chaud/Froid\"] = df[\"Chaud/Froid\"].astype(str)\n",
    "df[\"Chocolat\"] = df[\"Chocolat\"].astype(str)\n",
    "df[\"F1\"] = df[\"F1\"].astype(int)\n",
    "df[\"F2\"] = df[\"F2\"].astype(int)\n",
    "df[\"F3\"] = df[\"F3\"].astype(int)\n",
    "df[\"Carte Dimanche\"] = df[\"Carte Dimanche\"].astype(int)\n",
    "df[\"Fromage blanc_yaourt\"] = df[\"Fromage blanc_yaourt\"].astype(int)\n",
    "\n",
    "# useless, no data in Input\n",
    "#df[\"R Province\"] = df[\"R Province\"].astype(int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ccf978df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the optimization problem\n",
    "prob = p.LpProblem(\"Outil_Carte\", p.LpMinimize)\n",
    "\n",
    "# Define the decision variables\n",
    "carte_vars = p.LpVariable.dicts(\"Carte\", [(product, index_jour) for product in df.index for index_jour in range(len(JOURS))], cat=\"Binary\")\n",
    "dish_count_vars = p.LpVariable.dicts(\"Dish_Count\", df.index, cat=\"Integer\", lowBound=0)\n",
    "\n",
    "# Define the binary varimathaables y_i\n",
    "y_vars = p.LpVariable.dicts(\"y\", df.index, cat=p.LpBinary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4ac2f45a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the objecive expression\n",
    "penalty_expr = p.lpSum(M*(dish_count_vars[product] - y_vars[product]) for product in df.index)\n",
    "R_4sem_expr = p.lpSum(N*(int(df.loc[product, \"R\"]) * carte_vars[(product, index_jour)]) for product in df.index for index_jour in range(len(JOURS)))\n",
    "food_cost_expr = - p.lpSum(carte_vars[(product, index_jour)] for product in df.index for index_jour in range(len(JOURS)))\n",
    "\n",
    "objective_expr = food_cost_expr #+ R_4sem_expr + penalty_expr\n",
    "prob += objective_expr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2909afdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Constraint to update dish count variables\n",
    "for i in df.index:\n",
    "    prob += dish_count_vars[i] == p.lpSum(carte_vars[(i, j)] for j in range(7))   \n",
    "    \n",
    "# Constraint to enforce y_vars based on dish_count_vars\n",
    "for i in df.index:\n",
    "    prob += dish_count_vars[i] <= 2 * y_vars[i]\n",
    "    prob += dish_count_vars[i] >= y_vars[i]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2d71dabe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Constraint RNOK : No dish can be included on the menu before its expiry date \n",
    "for product in df.index:\n",
    "    for jour in JOURS:\n",
    "        index_jour = JOURS.index(jour)\n",
    "        if (product, index_jour) in carte_vars:\n",
    "            prob += p.lpSum(carte_vars[(product, k)] for k in range(max(0, index_jour - int(df.loc[product, \"DLC\"])), index_jour+1)) <= 1\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dba262d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contraintes quotidiennes par corner et par type d'EPD (de l'onglet Contraintes Jours)\n",
    "\n",
    "data_d = sheet_contraintes_jours.get('B5:W')\n",
    "headers_d = [\"Corners\"]+[f\"{header1}_{header2}\" for header1 in JOURS for header2 in EPD] #Défintion de header \"à la main\"\n",
    "df_d = pd.DataFrame(data_d, columns=headers_d)\n",
    "nb_corners = df_d.shape[0]\n",
    "\n",
    "for index_corner in range(nb_corners):\n",
    "    corner = df_d.loc[index_corner,\"Corners\"]\n",
    "    for jour in JOURS:\n",
    "        for type_EPD in EPD:\n",
    "            # Permet de mettre la valeur à 0 si la case n'est pas remplie ou l'entier si la case est remplie\n",
    "            prod_max = 0 if (df_d.loc[index_corner,f'{jour}_{type_EPD}'] == \"\" or df_d.loc[index_corner,f'{jour}_{type_EPD}'] is None) else int(df_d.loc[index_corner,f'{jour}_{type_EPD}'])\n",
    "            prob += p.lpSum(carte_vars[(produit, JOURS.index(jour))] for produit in df.index  if df.loc[produit, \"EPD\"] == type_EPD and df.loc[produit, \"Fournisseur\"] == corner ) <= prod_max\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "777bb852",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contraites hebdomadaires par sous categorie (de l'onglet Contraintes Sous Categories)\n",
    "\n",
    "data_a = sheet_contraintes_sous_categories.get('C4:F')\n",
    "headers_a = data_a.pop(0)\n",
    "df_a = pd.DataFrame(data_a, columns=headers_a)\n",
    "nb_contraintes = df_a.shape[0]\n",
    "\n",
    "\n",
    "for index_contrainte in range(nb_contraintes) :\n",
    "    prob += p.lpSum(carte_vars[(produit, index_jour)] for index_jour in range(len(JOURS)) for produit in df.index if df.loc[produit, \"EPD\"] == df_a.loc[index_contrainte,\"Catégorie\"] and df.loc[produit, \"Fournisseur\"] == df_a.loc[index_contrainte,\"Fournisseur\"] and df.loc[produit, \"Sous Categorie Corner\"] == df_a.loc[index_contrainte,\"Sous Catégorie\"] ) <= int(df_a.loc[index_contrainte,\"Qté max / semaine\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4baf3329",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Catégorie', 'Fournisseur', 'Sous Catégorie', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']\n"
     ]
    }
   ],
   "source": [
    "# Contraites quotidiennes par sous categorie (de l'onglet Contraintes Sous Categories)\n",
    "\n",
    "data_b = sheet_contraintes_sous_categories.get('I4:R')\n",
    "headers_b = data_b.pop(0)\n",
    "print(headers_b)\n",
    "df_b = pd.DataFrame(data_b, columns=headers_b)\n",
    "nb_contraintes = df_b.shape[0]\n",
    "\n",
    "for index_contrainte in range(nb_contraintes) :\n",
    "    for jour in JOURS:\n",
    "        quantite_max_jour = 0 if (df_b.loc[index_contrainte,jour] == \"\" or df_b.loc[index_contrainte,jour] is None) else int(df_b.loc[index_contrainte,jour])\n",
    "        prob += p.lpSum(carte_vars[(produit, JOURS.index(jour))] for produit in df.index if df.loc[produit, \"EPD\"] == df_b.loc[index_contrainte,\"Catégorie\"] and df.loc[produit, \"Fournisseur\"] == df_b.loc[index_contrainte,\"Fournisseur\"] and df.loc[produit, \"Sous Categorie Corner\"] == df_b.loc[index_contrainte,\"Sous Catégorie\"] ) <= quantite_max_jour\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c871cfdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contraintes particulières hebdomadaires sans conditions (de l'onglet Contraintes Particulières)\n",
    "\n",
    "data_e = sheet_contraintes_particulieres.get('A2:I')\n",
    "headers_e = data_e.pop(0)\n",
    "df_e = pd.DataFrame(data_e, columns=headers_e)\n",
    "nb_contraintes = df_e.shape[0]\n",
    "\n",
    "for index_contrainte in range(nb_contraintes):\n",
    "    if df_e.loc[index_contrainte,\"Condition activée ?\"] == \"TRUE\":\n",
    "        prob += dish_count_vars[int(df_e.loc[index_contrainte,\"ID Solver\"])]  <= int(df_e.loc[index_contrainte,\"Qté max / semaine\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d91cd9e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contraintes particulières hebdomadairess avec conditions (de l'onglet Contraintes Particulières)\n",
    "\n",
    "data_f = sheet_contraintes_particulieres.get('K2:U')\n",
    "headers_f = data_f.pop(0)\n",
    "df_f = pd.DataFrame(data_f, columns=headers_f)\n",
    "nb_contraintes = df_f.shape[0]\n",
    "\n",
    "for index_contrainte in range(nb_contraintes):\n",
    "    if df_f.loc[index_contrainte,\"Condition activée ?\"] == \"TRUE\":\n",
    "        if df_f.loc[index_contrainte,\"Fournisseur\"] == \"Frichti\": \n",
    "            prob += dish_count_vars[int(df_f.loc[index_contrainte,\"ID Solver\"])] <= 0\n",
    "        else : \n",
    "            prob += dish_count_vars[int(df_f.loc[index_contrainte,\"ID Solver\"])] <= 1 - dish_count_vars[int(df_f.loc[index_contrainte,\"ID Solver Produit non cumulable\"])]\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bd83468d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contraintes particulières quotidiennes avec conditions (de l'onglet Contraintes Particulières)\n",
    "\n",
    "data_g = sheet_contraintes_particulieres.get('X2:AG')\n",
    "headers_g = data_g.pop(0)\n",
    "df_g = pd.DataFrame(data_g, columns=headers_g)\n",
    "nb_contraintes = df_g.shape[0]\n",
    "\n",
    "for index_contrainte in range(nb_contraintes):\n",
    "    if df_g.loc[index_contrainte,\"Condition activée ?\"] == \"TRUE\":\n",
    "        if df_f.loc[index_contrainte,\"Fournisseur\"] == \"Frichti\":\n",
    "            prob += dish_count_vars[int(df_g.loc[index_contrainte,\"ID Solver\"])] <= 0\n",
    "        else : \n",
    "            prob += dish_count_vars[int(df_g.loc[index_contrainte,\"ID Solver\"])] <= 1 - dish_count_vars[int(df_g.loc[index_contrainte,\"ID Solver Produit non cumulable\"])]\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a905a7fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contrainte d'obligation de mettre à la carte (de l'onglet Contraintes Particulières)\n",
    "\n",
    "data_h = sheet_contraintes_particulieres.get('AJ2:AQ')\n",
    "headers_h = data_h.pop(0)\n",
    "df_h = pd.DataFrame(data_h, columns=headers_h)\n",
    "nb_contraintes = df_h.shape[0]\n",
    "\n",
    "for index_contrainte in range(nb_contraintes):\n",
    "    if df_h.loc[index_contrainte,\"Condition activée ?\"] == \"TRUE\":\n",
    "        prob += dish_count_vars[int(df_h.loc[index_contrainte,\"ID Solver\"])] == int(df_h.loc[index_contrainte,\"Qté semaine\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f06ad5ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GLPSOL: GLPK LP/MIP Solver, v4.65\n",
      "Parameter(s) specified in the command line:\n",
      " --cpxlp /var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/0a7e07622a6341e882ae945974c11789-pulp.lp\n",
      " -o /var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/0a7e07622a6341e882ae945974c11789-pulp.sol\n",
      "Reading problem data from '/var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/0a7e07622a6341e882ae945974c11789-pulp.lp'...\n",
      "1468 rows, 874 columns, 4423 non-zeros\n",
      "873 integer variables, 776 of which are binary\n",
      "2888 lines were read\n",
      "GLPK Integer Optimizer, v4.65\n",
      "1468 rows, 874 columns, 4423 non-zeros\n",
      "873 integer variables, 776 of which are binary\n",
      "Preprocessing...\n",
      "6 hidden packing inequaliti(es) were detected\n",
      "1034 rows, 766 columns, 3613 non-zeros\n",
      "766 integer variables, 673 of which are binary\n",
      "Scaling...\n",
      " A: min|aij| =  1.000e+00  max|aij| =  2.000e+00  ratio =  2.000e+00\n",
      "Problem data seem to be well scaled\n",
      "Constructing initial basis...\n",
      "Size of triangular part is 1034\n",
      "Solving LP relaxation...\n",
      "GLPK Simplex Optimizer, v4.65\n",
      "1034 rows, 766 columns, 3613 non-zeros\n",
      "      0: obj =  -2.000000000e+00 inf =   3.000e+00 (3)\n",
      "      1: obj =  -2.000000000e+00 inf =   0.000e+00 (0)\n",
      "*   526: obj =  -1.300000000e+02 inf =   0.000e+00 (0) 3\n",
      "OPTIMAL LP SOLUTION FOUND\n",
      "Integer optimization begins...\n",
      "Long-step dual simplex will be used\n",
      "+   526: mip =     not found yet >=              -inf        (1; 0)\n",
      "Solution found by heuristic: -130\n",
      "+   526: mip =  -1.300000000e+02 >=     tree is empty   0.0% (0; 1)\n",
      "INTEGER OPTIMAL SOLUTION FOUND\n",
      "Time used:   0.0 secs\n",
      "Memory used: 1.8 Mb (1903250 bytes)\n",
      "Writing MIP solution to '/var/folders/9z/v02bywcx5mxgvpjh2q8zvhk40000gn/T/0a7e07622a6341e882ae945974c11789-pulp.sol'...\n",
      "Optimal\n"
     ]
    }
   ],
   "source": [
    "# Solve the problem\n",
    "prob.solve(solver)\n",
    "\n",
    "# Check the status of the problem\n",
    "status = p.LpStatus[prob.status]\n",
    "print(status)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b186c08e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective function: -130.00\n",
      "Total food cost:  -130\n",
      "Valeur de carte_vars[0, 0]: 0\n",
      "Valeur de carte_vars[0, 1]: 1\n",
      "Valeur de carte_vars[0, 2]: 0\n",
      "Valeur de carte_vars[0, 3]: 0\n",
      "Valeur de carte_vars[0, 4]: 0\n",
      "Valeur de carte_vars[0, 5]: 0\n",
      "Valeur de carte_vars[0, 6]: 0\n",
      "Valeur de carte_vars[1, 0]: 1\n",
      "Valeur de carte_vars[1, 1]: 0\n",
      "Valeur de carte_vars[1, 2]: 0\n",
      "Valeur de carte_vars[1, 3]: 0\n",
      "Valeur de carte_vars[1, 4]: 0\n",
      "Valeur de carte_vars[1, 5]: 0\n",
      "Valeur de carte_vars[1, 6]: 0\n",
      "Valeur de carte_vars[2, 0]: 1\n",
      "Valeur de carte_vars[2, 1]: 0\n",
      "Valeur de carte_vars[2, 2]: 0\n",
      "Valeur de carte_vars[2, 3]: 0\n",
      "Valeur de carte_vars[2, 4]: 0\n",
      "Valeur de carte_vars[2, 5]: 0\n",
      "Valeur de carte_vars[2, 6]: 0\n",
      "Valeur de carte_vars[3, 0]: 1\n",
      "Valeur de carte_vars[3, 1]: 0\n",
      "Valeur de carte_vars[3, 2]: 0\n",
      "Valeur de carte_vars[3, 3]: 0\n",
      "Valeur de carte_vars[3, 4]: 0\n",
      "Valeur de carte_vars[3, 5]: 0\n",
      "Valeur de carte_vars[3, 6]: 0\n",
      "Valeur de carte_vars[4, 0]: 1\n",
      "Valeur de carte_vars[4, 1]: 0\n",
      "Valeur de carte_vars[4, 2]: 0\n",
      "Valeur de carte_vars[4, 3]: 0\n",
      "Valeur de carte_vars[4, 4]: 1\n",
      "Valeur de carte_vars[4, 5]: 0\n",
      "Valeur de carte_vars[4, 6]: 0\n",
      "Valeur de carte_vars[5, 0]: 1\n",
      "Valeur de carte_vars[5, 1]: 0\n",
      "Valeur de carte_vars[5, 2]: 0\n",
      "Valeur de carte_vars[5, 3]: 0\n",
      "Valeur de carte_vars[5, 4]: 0\n",
      "Valeur de carte_vars[5, 5]: 0\n",
      "Valeur de carte_vars[5, 6]: 0\n",
      "Valeur de carte_vars[6, 0]: 1\n",
      "Valeur de carte_vars[6, 1]: 0\n",
      "Valeur de carte_vars[6, 2]: 0\n",
      "Valeur de carte_vars[6, 3]: 0\n",
      "Valeur de carte_vars[6, 4]: 1\n",
      "Valeur de carte_vars[6, 5]: 0\n",
      "Valeur de carte_vars[6, 6]: 0\n",
      "Valeur de carte_vars[7, 0]: 1\n",
      "Valeur de carte_vars[7, 1]: 0\n",
      "Valeur de carte_vars[7, 2]: 0\n",
      "Valeur de carte_vars[7, 3]: 0\n",
      "Valeur de carte_vars[7, 4]: 0\n",
      "Valeur de carte_vars[7, 5]: 1\n",
      "Valeur de carte_vars[7, 6]: 0\n",
      "Valeur de carte_vars[8, 0]: 0\n",
      "Valeur de carte_vars[8, 1]: 0\n",
      "Valeur de carte_vars[8, 2]: 0\n",
      "Valeur de carte_vars[8, 3]: 0\n",
      "Valeur de carte_vars[8, 4]: 0\n",
      "Valeur de carte_vars[8, 5]: 0\n",
      "Valeur de carte_vars[8, 6]: 0\n",
      "Valeur de carte_vars[9, 0]: 0\n",
      "Valeur de carte_vars[9, 1]: 1\n",
      "Valeur de carte_vars[9, 2]: 0\n",
      "Valeur de carte_vars[9, 3]: 0\n",
      "Valeur de carte_vars[9, 4]: 0\n",
      "Valeur de carte_vars[9, 5]: 1\n",
      "Valeur de carte_vars[9, 6]: 0\n",
      "Valeur de carte_vars[10, 0]: 1\n",
      "Valeur de carte_vars[10, 1]: 0\n",
      "Valeur de carte_vars[10, 2]: 1\n",
      "Valeur de carte_vars[10, 3]: 0\n",
      "Valeur de carte_vars[10, 4]: 0\n",
      "Valeur de carte_vars[10, 5]: 0\n",
      "Valeur de carte_vars[10, 6]: 0\n",
      "Valeur de carte_vars[11, 0]: 0\n",
      "Valeur de carte_vars[11, 1]: 0\n",
      "Valeur de carte_vars[11, 2]: 1\n",
      "Valeur de carte_vars[11, 3]: 0\n",
      "Valeur de carte_vars[11, 4]: 0\n",
      "Valeur de carte_vars[11, 5]: 1\n",
      "Valeur de carte_vars[11, 6]: 0\n",
      "Valeur de carte_vars[12, 0]: 0\n",
      "Valeur de carte_vars[12, 1]: 0\n",
      "Valeur de carte_vars[12, 2]: 0\n",
      "Valeur de carte_vars[12, 3]: 1\n",
      "Valeur de carte_vars[12, 4]: 0\n",
      "Valeur de carte_vars[12, 5]: 1\n",
      "Valeur de carte_vars[12, 6]: 0\n",
      "Valeur de carte_vars[13, 0]: 0\n",
      "Valeur de carte_vars[13, 1]: 1\n",
      "Valeur de carte_vars[13, 2]: 0\n",
      "Valeur de carte_vars[13, 3]: 0\n",
      "Valeur de carte_vars[13, 4]: 0\n",
      "Valeur de carte_vars[13, 5]: 1\n",
      "Valeur de carte_vars[13, 6]: 0\n",
      "Valeur de carte_vars[14, 0]: 1\n",
      "Valeur de carte_vars[14, 1]: 0\n",
      "Valeur de carte_vars[14, 2]: 1\n",
      "Valeur de carte_vars[14, 3]: 0\n",
      "Valeur de carte_vars[14, 4]: 0\n",
      "Valeur de carte_vars[14, 5]: 0\n",
      "Valeur de carte_vars[14, 6]: 0\n",
      "Valeur de carte_vars[15, 0]: 0\n",
      "Valeur de carte_vars[15, 1]: 1\n",
      "Valeur de carte_vars[15, 2]: 0\n",
      "Valeur de carte_vars[15, 3]: 0\n",
      "Valeur de carte_vars[15, 4]: 1\n",
      "Valeur de carte_vars[15, 5]: 0\n",
      "Valeur de carte_vars[15, 6]: 0\n",
      "Valeur de carte_vars[16, 0]: 0\n",
      "Valeur de carte_vars[16, 1]: 1\n",
      "Valeur de carte_vars[16, 2]: 0\n",
      "Valeur de carte_vars[16, 3]: 0\n",
      "Valeur de carte_vars[16, 4]: 0\n",
      "Valeur de carte_vars[16, 5]: 1\n",
      "Valeur de carte_vars[16, 6]: 0\n",
      "Valeur de carte_vars[17, 0]: 0\n",
      "Valeur de carte_vars[17, 1]: 0\n",
      "Valeur de carte_vars[17, 2]: 0\n",
      "Valeur de carte_vars[17, 3]: 0\n",
      "Valeur de carte_vars[17, 4]: 0\n",
      "Valeur de carte_vars[17, 5]: 0\n",
      "Valeur de carte_vars[17, 6]: 0\n",
      "Valeur de carte_vars[18, 0]: 1\n",
      "Valeur de carte_vars[18, 1]: 0\n",
      "Valeur de carte_vars[18, 2]: 0\n",
      "Valeur de carte_vars[18, 3]: 1\n",
      "Valeur de carte_vars[18, 4]: 0\n",
      "Valeur de carte_vars[18, 5]: 0\n",
      "Valeur de carte_vars[18, 6]: 0\n",
      "Valeur de carte_vars[19, 0]: 1\n",
      "Valeur de carte_vars[19, 1]: 0\n",
      "Valeur de carte_vars[19, 2]: 1\n",
      "Valeur de carte_vars[19, 3]: 0\n",
      "Valeur de carte_vars[19, 4]: 0\n",
      "Valeur de carte_vars[19, 5]: 0\n",
      "Valeur de carte_vars[19, 6]: 0\n",
      "Valeur de carte_vars[20, 0]: 0\n",
      "Valeur de carte_vars[20, 1]: 0\n",
      "Valeur de carte_vars[20, 2]: 0\n",
      "Valeur de carte_vars[20, 3]: 1\n",
      "Valeur de carte_vars[20, 4]: 0\n",
      "Valeur de carte_vars[20, 5]: 1\n",
      "Valeur de carte_vars[20, 6]: 0\n",
      "Valeur de carte_vars[21, 0]: 0\n",
      "Valeur de carte_vars[21, 1]: 1\n",
      "Valeur de carte_vars[21, 2]: 0\n",
      "Valeur de carte_vars[21, 3]: 1\n",
      "Valeur de carte_vars[21, 4]: 0\n",
      "Valeur de carte_vars[21, 5]: 0\n",
      "Valeur de carte_vars[21, 6]: 0\n",
      "Valeur de carte_vars[22, 0]: 0\n",
      "Valeur de carte_vars[22, 1]: 1\n",
      "Valeur de carte_vars[22, 2]: 0\n",
      "Valeur de carte_vars[22, 3]: 0\n",
      "Valeur de carte_vars[22, 4]: 0\n",
      "Valeur de carte_vars[22, 5]: 1\n",
      "Valeur de carte_vars[22, 6]: 0\n",
      "Valeur de carte_vars[23, 0]: 0\n",
      "Valeur de carte_vars[23, 1]: 0\n",
      "Valeur de carte_vars[23, 2]: 0\n",
      "Valeur de carte_vars[23, 3]: 0\n",
      "Valeur de carte_vars[23, 4]: 0\n",
      "Valeur de carte_vars[23, 5]: 0\n",
      "Valeur de carte_vars[23, 6]: 0\n",
      "Valeur de carte_vars[24, 0]: 1\n",
      "Valeur de carte_vars[24, 1]: 0\n",
      "Valeur de carte_vars[24, 2]: 0\n",
      "Valeur de carte_vars[24, 3]: 1\n",
      "Valeur de carte_vars[24, 4]: 0\n",
      "Valeur de carte_vars[24, 5]: 0\n",
      "Valeur de carte_vars[24, 6]: 0\n",
      "Valeur de carte_vars[25, 0]: 0\n",
      "Valeur de carte_vars[25, 1]: 1\n",
      "Valeur de carte_vars[25, 2]: 0\n",
      "Valeur de carte_vars[25, 3]: 0\n",
      "Valeur de carte_vars[25, 4]: 1\n",
      "Valeur de carte_vars[25, 5]: 0\n",
      "Valeur de carte_vars[25, 6]: 0\n",
      "Valeur de carte_vars[26, 0]: 0\n",
      "Valeur de carte_vars[26, 1]: 0\n",
      "Valeur de carte_vars[26, 2]: 1\n",
      "Valeur de carte_vars[26, 3]: 0\n",
      "Valeur de carte_vars[26, 4]: 0\n",
      "Valeur de carte_vars[26, 5]: 0\n",
      "Valeur de carte_vars[26, 6]: 0\n",
      "Valeur de carte_vars[27, 0]: 0\n",
      "Valeur de carte_vars[27, 1]: 1\n",
      "Valeur de carte_vars[27, 2]: 0\n",
      "Valeur de carte_vars[27, 3]: 0\n",
      "Valeur de carte_vars[27, 4]: 1\n",
      "Valeur de carte_vars[27, 5]: 0\n",
      "Valeur de carte_vars[27, 6]: 0\n",
      "Valeur de carte_vars[28, 0]: 0\n",
      "Valeur de carte_vars[28, 1]: 0\n",
      "Valeur de carte_vars[28, 2]: 0\n",
      "Valeur de carte_vars[28, 3]: 0\n",
      "Valeur de carte_vars[28, 4]: 0\n",
      "Valeur de carte_vars[28, 5]: 0\n",
      "Valeur de carte_vars[28, 6]: 0\n",
      "Valeur de carte_vars[29, 0]: 0\n",
      "Valeur de carte_vars[29, 1]: 1\n",
      "Valeur de carte_vars[29, 2]: 0\n",
      "Valeur de carte_vars[29, 3]: 0\n",
      "Valeur de carte_vars[29, 4]: 1\n",
      "Valeur de carte_vars[29, 5]: 0\n",
      "Valeur de carte_vars[29, 6]: 0\n",
      "Valeur de carte_vars[30, 0]: 0\n",
      "Valeur de carte_vars[30, 1]: 0\n",
      "Valeur de carte_vars[30, 2]: 1\n",
      "Valeur de carte_vars[30, 3]: 0\n",
      "Valeur de carte_vars[30, 4]: 0\n",
      "Valeur de carte_vars[30, 5]: 0\n",
      "Valeur de carte_vars[30, 6]: 0\n",
      "Valeur de carte_vars[31, 0]: 0\n",
      "Valeur de carte_vars[31, 1]: 0\n",
      "Valeur de carte_vars[31, 2]: 0\n",
      "Valeur de carte_vars[31, 3]: 0\n",
      "Valeur de carte_vars[31, 4]: 0\n",
      "Valeur de carte_vars[31, 5]: 0\n",
      "Valeur de carte_vars[31, 6]: 0\n",
      "Valeur de carte_vars[32, 0]: 0\n",
      "Valeur de carte_vars[32, 1]: 0\n",
      "Valeur de carte_vars[32, 2]: 1\n",
      "Valeur de carte_vars[32, 3]: 0\n",
      "Valeur de carte_vars[32, 4]: 0\n",
      "Valeur de carte_vars[32, 5]: 1\n",
      "Valeur de carte_vars[32, 6]: 0\n",
      "Valeur de carte_vars[33, 0]: 0\n",
      "Valeur de carte_vars[33, 1]: 1\n",
      "Valeur de carte_vars[33, 2]: 0\n",
      "Valeur de carte_vars[33, 3]: 1\n",
      "Valeur de carte_vars[33, 4]: 0\n",
      "Valeur de carte_vars[33, 5]: 0\n",
      "Valeur de carte_vars[33, 6]: 0\n",
      "Valeur de carte_vars[34, 0]: 1\n",
      "Valeur de carte_vars[34, 1]: 0\n",
      "Valeur de carte_vars[34, 2]: 0\n",
      "Valeur de carte_vars[34, 3]: 0\n",
      "Valeur de carte_vars[34, 4]: 1\n",
      "Valeur de carte_vars[34, 5]: 0\n",
      "Valeur de carte_vars[34, 6]: 0\n",
      "Valeur de carte_vars[35, 0]: 0\n",
      "Valeur de carte_vars[35, 1]: 1\n",
      "Valeur de carte_vars[35, 2]: 0\n",
      "Valeur de carte_vars[35, 3]: 0\n",
      "Valeur de carte_vars[35, 4]: 0\n",
      "Valeur de carte_vars[35, 5]: 1\n",
      "Valeur de carte_vars[35, 6]: 0\n",
      "Valeur de carte_vars[36, 0]: 0\n",
      "Valeur de carte_vars[36, 1]: 0\n",
      "Valeur de carte_vars[36, 2]: 1\n",
      "Valeur de carte_vars[36, 3]: 0\n",
      "Valeur de carte_vars[36, 4]: 0\n",
      "Valeur de carte_vars[36, 5]: 0\n",
      "Valeur de carte_vars[36, 6]: 0\n",
      "Valeur de carte_vars[37, 0]: 1\n",
      "Valeur de carte_vars[37, 1]: 0\n",
      "Valeur de carte_vars[37, 2]: 0\n",
      "Valeur de carte_vars[37, 3]: 1\n",
      "Valeur de carte_vars[37, 4]: 0\n",
      "Valeur de carte_vars[37, 5]: 0\n",
      "Valeur de carte_vars[37, 6]: 0\n",
      "Valeur de carte_vars[38, 0]: 1\n",
      "Valeur de carte_vars[38, 1]: 0\n",
      "Valeur de carte_vars[38, 2]: 0\n",
      "Valeur de carte_vars[38, 3]: 1\n",
      "Valeur de carte_vars[38, 4]: 0\n",
      "Valeur de carte_vars[38, 5]: 0\n",
      "Valeur de carte_vars[38, 6]: 0\n",
      "Valeur de carte_vars[39, 0]: 0\n",
      "Valeur de carte_vars[39, 1]: 1\n",
      "Valeur de carte_vars[39, 2]: 0\n",
      "Valeur de carte_vars[39, 3]: 0\n",
      "Valeur de carte_vars[39, 4]: 0\n",
      "Valeur de carte_vars[39, 5]: 0\n",
      "Valeur de carte_vars[39, 6]: 0\n",
      "Valeur de carte_vars[40, 0]: 0\n",
      "Valeur de carte_vars[40, 1]: 0\n",
      "Valeur de carte_vars[40, 2]: 1\n",
      "Valeur de carte_vars[40, 3]: 0\n",
      "Valeur de carte_vars[40, 4]: 0\n",
      "Valeur de carte_vars[40, 5]: 0\n",
      "Valeur de carte_vars[40, 6]: 0\n",
      "Valeur de carte_vars[41, 0]: 0\n",
      "Valeur de carte_vars[41, 1]: 0\n",
      "Valeur de carte_vars[41, 2]: 0\n",
      "Valeur de carte_vars[41, 3]: 1\n",
      "Valeur de carte_vars[41, 4]: 0\n",
      "Valeur de carte_vars[41, 5]: 0\n",
      "Valeur de carte_vars[41, 6]: 0\n",
      "Valeur de carte_vars[42, 0]: 0\n",
      "Valeur de carte_vars[42, 1]: 0\n",
      "Valeur de carte_vars[42, 2]: 0\n",
      "Valeur de carte_vars[42, 3]: 1\n",
      "Valeur de carte_vars[42, 4]: 0\n",
      "Valeur de carte_vars[42, 5]: 0\n",
      "Valeur de carte_vars[42, 6]: 0\n",
      "Valeur de carte_vars[43, 0]: 0\n",
      "Valeur de carte_vars[43, 1]: 0\n",
      "Valeur de carte_vars[43, 2]: 0\n",
      "Valeur de carte_vars[43, 3]: 1\n",
      "Valeur de carte_vars[43, 4]: 0\n",
      "Valeur de carte_vars[43, 5]: 0\n",
      "Valeur de carte_vars[43, 6]: 0\n",
      "Valeur de carte_vars[44, 0]: 0\n",
      "Valeur de carte_vars[44, 1]: 0\n",
      "Valeur de carte_vars[44, 2]: 0\n",
      "Valeur de carte_vars[44, 3]: 0\n",
      "Valeur de carte_vars[44, 4]: 1\n",
      "Valeur de carte_vars[44, 5]: 0\n",
      "Valeur de carte_vars[44, 6]: 0\n",
      "Valeur de carte_vars[45, 0]: 0\n",
      "Valeur de carte_vars[45, 1]: 0\n",
      "Valeur de carte_vars[45, 2]: 1\n",
      "Valeur de carte_vars[45, 3]: 0\n",
      "Valeur de carte_vars[45, 4]: 0\n",
      "Valeur de carte_vars[45, 5]: 0\n",
      "Valeur de carte_vars[45, 6]: 0\n",
      "Valeur de carte_vars[46, 0]: 0\n",
      "Valeur de carte_vars[46, 1]: 0\n",
      "Valeur de carte_vars[46, 2]: 1\n",
      "Valeur de carte_vars[46, 3]: 0\n",
      "Valeur de carte_vars[46, 4]: 0\n",
      "Valeur de carte_vars[46, 5]: 0\n",
      "Valeur de carte_vars[46, 6]: 0\n",
      "Valeur de carte_vars[47, 0]: 0\n",
      "Valeur de carte_vars[47, 1]: 0\n",
      "Valeur de carte_vars[47, 2]: 0\n",
      "Valeur de carte_vars[47, 3]: 1\n",
      "Valeur de carte_vars[47, 4]: 0\n",
      "Valeur de carte_vars[47, 5]: 0\n",
      "Valeur de carte_vars[47, 6]: 0\n",
      "Valeur de carte_vars[48, 0]: 0\n",
      "Valeur de carte_vars[48, 1]: 0\n",
      "Valeur de carte_vars[48, 2]: 0\n",
      "Valeur de carte_vars[48, 3]: 1\n",
      "Valeur de carte_vars[48, 4]: 0\n",
      "Valeur de carte_vars[48, 5]: 0\n",
      "Valeur de carte_vars[48, 6]: 0\n",
      "Valeur de carte_vars[49, 0]: 0\n",
      "Valeur de carte_vars[49, 1]: 0\n",
      "Valeur de carte_vars[49, 2]: 0\n",
      "Valeur de carte_vars[49, 3]: 0\n",
      "Valeur de carte_vars[49, 4]: 0\n",
      "Valeur de carte_vars[49, 5]: 0\n",
      "Valeur de carte_vars[49, 6]: 0\n",
      "Valeur de carte_vars[50, 0]: 1\n",
      "Valeur de carte_vars[50, 1]: 0\n",
      "Valeur de carte_vars[50, 2]: 0\n",
      "Valeur de carte_vars[50, 3]: 0\n",
      "Valeur de carte_vars[50, 4]: 1\n",
      "Valeur de carte_vars[50, 5]: 0\n",
      "Valeur de carte_vars[50, 6]: 0\n",
      "Valeur de carte_vars[51, 0]: 0\n",
      "Valeur de carte_vars[51, 1]: 1\n",
      "Valeur de carte_vars[51, 2]: 0\n",
      "Valeur de carte_vars[51, 3]: 0\n",
      "Valeur de carte_vars[51, 4]: 0\n",
      "Valeur de carte_vars[51, 5]: 1\n",
      "Valeur de carte_vars[51, 6]: 0\n",
      "Valeur de carte_vars[52, 0]: 1\n",
      "Valeur de carte_vars[52, 1]: 0\n",
      "Valeur de carte_vars[52, 2]: 0\n",
      "Valeur de carte_vars[52, 3]: 1\n",
      "Valeur de carte_vars[52, 4]: 0\n",
      "Valeur de carte_vars[52, 5]: 0\n",
      "Valeur de carte_vars[52, 6]: 0\n",
      "Valeur de carte_vars[53, 0]: 0\n",
      "Valeur de carte_vars[53, 1]: 1\n",
      "Valeur de carte_vars[53, 2]: 0\n",
      "Valeur de carte_vars[53, 3]: 0\n",
      "Valeur de carte_vars[53, 4]: 1\n",
      "Valeur de carte_vars[53, 5]: 0\n",
      "Valeur de carte_vars[53, 6]: 0\n",
      "Valeur de carte_vars[54, 0]: 1\n",
      "Valeur de carte_vars[54, 1]: 0\n",
      "Valeur de carte_vars[54, 2]: 0\n",
      "Valeur de carte_vars[54, 3]: 0\n",
      "Valeur de carte_vars[54, 4]: 0\n",
      "Valeur de carte_vars[54, 5]: 1\n",
      "Valeur de carte_vars[54, 6]: 0\n",
      "Valeur de carte_vars[55, 0]: 0\n",
      "Valeur de carte_vars[55, 1]: 0\n",
      "Valeur de carte_vars[55, 2]: 1\n",
      "Valeur de carte_vars[55, 3]: 0\n",
      "Valeur de carte_vars[55, 4]: 0\n",
      "Valeur de carte_vars[55, 5]: 0\n",
      "Valeur de carte_vars[55, 6]: 0\n",
      "Valeur de carte_vars[56, 0]: 0\n",
      "Valeur de carte_vars[56, 1]: 0\n",
      "Valeur de carte_vars[56, 2]: 0\n",
      "Valeur de carte_vars[56, 3]: 0\n",
      "Valeur de carte_vars[56, 4]: 0\n",
      "Valeur de carte_vars[56, 5]: 0\n",
      "Valeur de carte_vars[56, 6]: 0\n",
      "Valeur de carte_vars[57, 0]: 1\n",
      "Valeur de carte_vars[57, 1]: 0\n",
      "Valeur de carte_vars[57, 2]: 0\n",
      "Valeur de carte_vars[57, 3]: 0\n",
      "Valeur de carte_vars[57, 4]: 1\n",
      "Valeur de carte_vars[57, 5]: 0\n",
      "Valeur de carte_vars[57, 6]: 0\n",
      "Valeur de carte_vars[58, 0]: 0\n",
      "Valeur de carte_vars[58, 1]: 0\n",
      "Valeur de carte_vars[58, 2]: 0\n",
      "Valeur de carte_vars[58, 3]: 0\n",
      "Valeur de carte_vars[58, 4]: 0\n",
      "Valeur de carte_vars[58, 5]: 0\n",
      "Valeur de carte_vars[58, 6]: 0\n",
      "Valeur de carte_vars[59, 0]: 1\n",
      "Valeur de carte_vars[59, 1]: 0\n",
      "Valeur de carte_vars[59, 2]: 0\n",
      "Valeur de carte_vars[59, 3]: 1\n",
      "Valeur de carte_vars[59, 4]: 0\n",
      "Valeur de carte_vars[59, 5]: 0\n",
      "Valeur de carte_vars[59, 6]: 0\n",
      "Valeur de carte_vars[60, 0]: 0\n",
      "Valeur de carte_vars[60, 1]: 0\n",
      "Valeur de carte_vars[60, 2]: 1\n",
      "Valeur de carte_vars[60, 3]: 0\n",
      "Valeur de carte_vars[60, 4]: 0\n",
      "Valeur de carte_vars[60, 5]: 0\n",
      "Valeur de carte_vars[60, 6]: 0\n",
      "Valeur de carte_vars[61, 0]: 0\n",
      "Valeur de carte_vars[61, 1]: 1\n",
      "Valeur de carte_vars[61, 2]: 0\n",
      "Valeur de carte_vars[61, 3]: 0\n",
      "Valeur de carte_vars[61, 4]: 1\n",
      "Valeur de carte_vars[61, 5]: 0\n",
      "Valeur de carte_vars[61, 6]: 0\n",
      "Valeur de carte_vars[62, 0]: 1\n",
      "Valeur de carte_vars[62, 1]: 0\n",
      "Valeur de carte_vars[62, 2]: 0\n",
      "Valeur de carte_vars[62, 3]: 1\n",
      "Valeur de carte_vars[62, 4]: 0\n",
      "Valeur de carte_vars[62, 5]: 0\n",
      "Valeur de carte_vars[62, 6]: 0\n",
      "Valeur de carte_vars[63, 0]: 0\n",
      "Valeur de carte_vars[63, 1]: 1\n",
      "Valeur de carte_vars[63, 2]: 0\n",
      "Valeur de carte_vars[63, 3]: 0\n",
      "Valeur de carte_vars[63, 4]: 1\n",
      "Valeur de carte_vars[63, 5]: 0\n",
      "Valeur de carte_vars[63, 6]: 0\n",
      "Valeur de carte_vars[64, 0]: 1\n",
      "Valeur de carte_vars[64, 1]: 0\n",
      "Valeur de carte_vars[64, 2]: 0\n",
      "Valeur de carte_vars[64, 3]: 1\n",
      "Valeur de carte_vars[64, 4]: 0\n",
      "Valeur de carte_vars[64, 5]: 0\n",
      "Valeur de carte_vars[64, 6]: 0\n",
      "Valeur de carte_vars[65, 0]: 1\n",
      "Valeur de carte_vars[65, 1]: 0\n",
      "Valeur de carte_vars[65, 2]: 0\n",
      "Valeur de carte_vars[65, 3]: 1\n",
      "Valeur de carte_vars[65, 4]: 0\n",
      "Valeur de carte_vars[65, 5]: 0\n",
      "Valeur de carte_vars[65, 6]: 0\n",
      "Valeur de carte_vars[66, 0]: 1\n",
      "Valeur de carte_vars[66, 1]: 0\n",
      "Valeur de carte_vars[66, 2]: 1\n",
      "Valeur de carte_vars[66, 3]: 0\n",
      "Valeur de carte_vars[66, 4]: 0\n",
      "Valeur de carte_vars[66, 5]: 0\n",
      "Valeur de carte_vars[66, 6]: 0\n",
      "Valeur de carte_vars[67, 0]: 0\n",
      "Valeur de carte_vars[67, 1]: 0\n",
      "Valeur de carte_vars[67, 2]: 0\n",
      "Valeur de carte_vars[67, 3]: 0\n",
      "Valeur de carte_vars[67, 4]: 0\n",
      "Valeur de carte_vars[67, 5]: 0\n",
      "Valeur de carte_vars[67, 6]: 0\n",
      "Valeur de carte_vars[68, 0]: 0\n",
      "Valeur de carte_vars[68, 1]: 0\n",
      "Valeur de carte_vars[68, 2]: 0\n",
      "Valeur de carte_vars[68, 3]: 1\n",
      "Valeur de carte_vars[68, 4]: 0\n",
      "Valeur de carte_vars[68, 5]: 0\n",
      "Valeur de carte_vars[68, 6]: 0\n",
      "Valeur de carte_vars[69, 0]: 0\n",
      "Valeur de carte_vars[69, 1]: 0\n",
      "Valeur de carte_vars[69, 2]: 0\n",
      "Valeur de carte_vars[69, 3]: 0\n",
      "Valeur de carte_vars[69, 4]: 1\n",
      "Valeur de carte_vars[69, 5]: 0\n",
      "Valeur de carte_vars[69, 6]: 0\n",
      "Valeur de carte_vars[70, 0]: 0\n",
      "Valeur de carte_vars[70, 1]: 0\n",
      "Valeur de carte_vars[70, 2]: 1\n",
      "Valeur de carte_vars[70, 3]: 0\n",
      "Valeur de carte_vars[70, 4]: 0\n",
      "Valeur de carte_vars[70, 5]: 1\n",
      "Valeur de carte_vars[70, 6]: 0\n",
      "Valeur de carte_vars[71, 0]: 0\n",
      "Valeur de carte_vars[71, 1]: 0\n",
      "Valeur de carte_vars[71, 2]: 0\n",
      "Valeur de carte_vars[71, 3]: 0\n",
      "Valeur de carte_vars[71, 4]: 1\n",
      "Valeur de carte_vars[71, 5]: 0\n",
      "Valeur de carte_vars[71, 6]: 0\n",
      "Valeur de carte_vars[72, 0]: 1\n",
      "Valeur de carte_vars[72, 1]: 0\n",
      "Valeur de carte_vars[72, 2]: 1\n",
      "Valeur de carte_vars[72, 3]: 0\n",
      "Valeur de carte_vars[72, 4]: 0\n",
      "Valeur de carte_vars[72, 5]: 0\n",
      "Valeur de carte_vars[72, 6]: 0\n",
      "Valeur de carte_vars[73, 0]: 1\n",
      "Valeur de carte_vars[73, 1]: 0\n",
      "Valeur de carte_vars[73, 2]: 0\n",
      "Valeur de carte_vars[73, 3]: 0\n",
      "Valeur de carte_vars[73, 4]: 0\n",
      "Valeur de carte_vars[73, 5]: 1\n",
      "Valeur de carte_vars[73, 6]: 0\n",
      "Valeur de carte_vars[74, 0]: 0\n",
      "Valeur de carte_vars[74, 1]: 1\n",
      "Valeur de carte_vars[74, 2]: 0\n",
      "Valeur de carte_vars[74, 3]: 0\n",
      "Valeur de carte_vars[74, 4]: 0\n",
      "Valeur de carte_vars[74, 5]: 0\n",
      "Valeur de carte_vars[74, 6]: 0\n",
      "Valeur de carte_vars[75, 0]: 1\n",
      "Valeur de carte_vars[75, 1]: 0\n",
      "Valeur de carte_vars[75, 2]: 0\n",
      "Valeur de carte_vars[75, 3]: 0\n",
      "Valeur de carte_vars[75, 4]: 0\n",
      "Valeur de carte_vars[75, 5]: 1\n",
      "Valeur de carte_vars[75, 6]: 0\n",
      "Valeur de carte_vars[76, 0]: 0\n",
      "Valeur de carte_vars[76, 1]: 1\n",
      "Valeur de carte_vars[76, 2]: 0\n",
      "Valeur de carte_vars[76, 3]: 0\n",
      "Valeur de carte_vars[76, 4]: 0\n",
      "Valeur de carte_vars[76, 5]: 0\n",
      "Valeur de carte_vars[76, 6]: 0\n",
      "Valeur de carte_vars[77, 0]: 1\n",
      "Valeur de carte_vars[77, 1]: 0\n",
      "Valeur de carte_vars[77, 2]: 0\n",
      "Valeur de carte_vars[77, 3]: 1\n",
      "Valeur de carte_vars[77, 4]: 0\n",
      "Valeur de carte_vars[77, 5]: 0\n",
      "Valeur de carte_vars[77, 6]: 0\n",
      "Valeur de carte_vars[78, 0]: 0\n",
      "Valeur de carte_vars[78, 1]: 1\n",
      "Valeur de carte_vars[78, 2]: 0\n",
      "Valeur de carte_vars[78, 3]: 0\n",
      "Valeur de carte_vars[78, 4]: 1\n",
      "Valeur de carte_vars[78, 5]: 0\n",
      "Valeur de carte_vars[78, 6]: 0\n",
      "Valeur de carte_vars[79, 0]: 1\n",
      "Valeur de carte_vars[79, 1]: 0\n",
      "Valeur de carte_vars[79, 2]: 0\n",
      "Valeur de carte_vars[79, 3]: 1\n",
      "Valeur de carte_vars[79, 4]: 0\n",
      "Valeur de carte_vars[79, 5]: 0\n",
      "Valeur de carte_vars[79, 6]: 0\n",
      "Valeur de carte_vars[80, 0]: 0\n",
      "Valeur de carte_vars[80, 1]: 1\n",
      "Valeur de carte_vars[80, 2]: 0\n",
      "Valeur de carte_vars[80, 3]: 0\n",
      "Valeur de carte_vars[80, 4]: 1\n",
      "Valeur de carte_vars[80, 5]: 0\n",
      "Valeur de carte_vars[80, 6]: 0\n",
      "Valeur de carte_vars[81, 0]: 0\n",
      "Valeur de carte_vars[81, 1]: 0\n",
      "Valeur de carte_vars[81, 2]: 1\n",
      "Valeur de carte_vars[81, 3]: 0\n",
      "Valeur de carte_vars[81, 4]: 0\n",
      "Valeur de carte_vars[81, 5]: 1\n",
      "Valeur de carte_vars[81, 6]: 0\n",
      "Valeur de carte_vars[82, 0]: 0\n",
      "Valeur de carte_vars[82, 1]: 0\n",
      "Valeur de carte_vars[82, 2]: 1\n",
      "Valeur de carte_vars[82, 3]: 0\n",
      "Valeur de carte_vars[82, 4]: 0\n",
      "Valeur de carte_vars[82, 5]: 0\n",
      "Valeur de carte_vars[82, 6]: 0\n",
      "Valeur de carte_vars[83, 0]: 0\n",
      "Valeur de carte_vars[83, 1]: 0\n",
      "Valeur de carte_vars[83, 2]: 0\n",
      "Valeur de carte_vars[83, 3]: 1\n",
      "Valeur de carte_vars[83, 4]: 0\n",
      "Valeur de carte_vars[83, 5]: 0\n",
      "Valeur de carte_vars[83, 6]: 0\n",
      "Valeur de carte_vars[84, 0]: 0\n",
      "Valeur de carte_vars[84, 1]: 1\n",
      "Valeur de carte_vars[84, 2]: 0\n",
      "Valeur de carte_vars[84, 3]: 0\n",
      "Valeur de carte_vars[84, 4]: 0\n",
      "Valeur de carte_vars[84, 5]: 0\n",
      "Valeur de carte_vars[84, 6]: 0\n",
      "Valeur de carte_vars[85, 0]: 0\n",
      "Valeur de carte_vars[85, 1]: 1\n",
      "Valeur de carte_vars[85, 2]: 0\n",
      "Valeur de carte_vars[85, 3]: 0\n",
      "Valeur de carte_vars[85, 4]: 0\n",
      "Valeur de carte_vars[85, 5]: 0\n",
      "Valeur de carte_vars[85, 6]: 0\n",
      "Valeur de carte_vars[86, 0]: 0\n",
      "Valeur de carte_vars[86, 1]: 0\n",
      "Valeur de carte_vars[86, 2]: 0\n",
      "Valeur de carte_vars[86, 3]: 0\n",
      "Valeur de carte_vars[86, 4]: 0\n",
      "Valeur de carte_vars[86, 5]: 0\n",
      "Valeur de carte_vars[86, 6]: 0\n",
      "Valeur de carte_vars[87, 0]: 0\n",
      "Valeur de carte_vars[87, 1]: 0\n",
      "Valeur de carte_vars[87, 2]: 0\n",
      "Valeur de carte_vars[87, 3]: 1\n",
      "Valeur de carte_vars[87, 4]: 0\n",
      "Valeur de carte_vars[87, 5]: 0\n",
      "Valeur de carte_vars[87, 6]: 0\n",
      "Valeur de carte_vars[88, 0]: 0\n",
      "Valeur de carte_vars[88, 1]: 0\n",
      "Valeur de carte_vars[88, 2]: 0\n",
      "Valeur de carte_vars[88, 3]: 0\n",
      "Valeur de carte_vars[88, 4]: 1\n",
      "Valeur de carte_vars[88, 5]: 0\n",
      "Valeur de carte_vars[88, 6]: 0\n",
      "Valeur de carte_vars[89, 0]: 0\n",
      "Valeur de carte_vars[89, 1]: 0\n",
      "Valeur de carte_vars[89, 2]: 0\n",
      "Valeur de carte_vars[89, 3]: 0\n",
      "Valeur de carte_vars[89, 4]: 0\n",
      "Valeur de carte_vars[89, 5]: 1\n",
      "Valeur de carte_vars[89, 6]: 0\n",
      "Valeur de carte_vars[90, 0]: 0\n",
      "Valeur de carte_vars[90, 1]: 0\n",
      "Valeur de carte_vars[90, 2]: 0\n",
      "Valeur de carte_vars[90, 3]: 0\n",
      "Valeur de carte_vars[90, 4]: 0\n",
      "Valeur de carte_vars[90, 5]: 0\n",
      "Valeur de carte_vars[90, 6]: 0\n",
      "Valeur de carte_vars[91, 0]: 0\n",
      "Valeur de carte_vars[91, 1]: 0\n",
      "Valeur de carte_vars[91, 2]: 0\n",
      "Valeur de carte_vars[91, 3]: 0\n",
      "Valeur de carte_vars[91, 4]: 0\n",
      "Valeur de carte_vars[91, 5]: 0\n",
      "Valeur de carte_vars[91, 6]: 0\n",
      "Valeur de carte_vars[92, 0]: 0\n",
      "Valeur de carte_vars[92, 1]: 0\n",
      "Valeur de carte_vars[92, 2]: 0\n",
      "Valeur de carte_vars[92, 3]: 0\n",
      "Valeur de carte_vars[92, 4]: 0\n",
      "Valeur de carte_vars[92, 5]: 0\n",
      "Valeur de carte_vars[92, 6]: 0\n",
      "Valeur de carte_vars[93, 0]: 0\n",
      "Valeur de carte_vars[93, 1]: 0\n",
      "Valeur de carte_vars[93, 2]: 0\n",
      "Valeur de carte_vars[93, 3]: 0\n",
      "Valeur de carte_vars[93, 4]: 0\n",
      "Valeur de carte_vars[93, 5]: 0\n",
      "Valeur de carte_vars[93, 6]: 0\n",
      "Valeur de carte_vars[94, 0]: 0\n",
      "Valeur de carte_vars[94, 1]: 0\n",
      "Valeur de carte_vars[94, 2]: 1\n",
      "Valeur de carte_vars[94, 3]: 0\n",
      "Valeur de carte_vars[94, 4]: 0\n",
      "Valeur de carte_vars[94, 5]: 1\n",
      "Valeur de carte_vars[94, 6]: 0\n",
      "Valeur de carte_vars[95, 0]: 0\n",
      "Valeur de carte_vars[95, 1]: 0\n",
      "Valeur de carte_vars[95, 2]: 0\n",
      "Valeur de carte_vars[95, 3]: 0\n",
      "Valeur de carte_vars[95, 4]: 0\n",
      "Valeur de carte_vars[95, 5]: 0\n",
      "Valeur de carte_vars[95, 6]: 0\n",
      "Valeur de carte_vars[96, 0]: 0\n",
      "Valeur de carte_vars[96, 1]: 0\n",
      "Valeur de carte_vars[96, 2]: 0\n",
      "Valeur de carte_vars[96, 3]: 0\n",
      "Valeur de carte_vars[96, 4]: 0\n",
      "Valeur de carte_vars[96, 5]: 0\n",
      "Valeur de carte_vars[96, 6]: 0\n"
     ]
    }
   ],
   "source": [
    "# Print the optimal total food cost\n",
    "print(f\"Objective function: {p.value(prob.objective):,.2f}\")\n",
    "\n",
    "# Print the optimal menu for each day\n",
    "result_list = [] \n",
    "for index_jour in range(len(JOURS)):\n",
    "    for product in df.index:\n",
    "        if carte_vars[(product, index_jour)].varValue == 1:\n",
    "            result_dict = {\"Day of the week \" : index_jour+1,\n",
    "                           \"ID\" : df.loc[product, 'ID'],\n",
    "                           \"Titre\" : df.loc[product, 'Titre'],\n",
    "                           \"Fournisseur\" : df.loc[product,\"Fournisseur\"],\n",
    "                           \"Catégorie\" : df.loc[product,\"EPD\"],\n",
    "                           \"Sous Categorie Corner\" : df.loc[product,\"Sous Categorie Corner\"],\n",
    "                           \"DLC\" : df.loc[product, \"DLC\"],\n",
    "                           \"FC\" : df.loc[product, \"FC\"],\n",
    "                          \"AA\" : df.loc[product, \"AA\"],\n",
    "                          \"Province\" : df.loc[product, \"Province\"],\n",
    "                          \"Regime\" : df.loc[product, \"Regime\"],\n",
    "                           \"Sous Categ Protein\" : df.loc[product, \"Sous Categ Proteine\"],\n",
    "                           \"Base\" : df.loc[product, \"Base\"],\n",
    "                           \"Chaud/Froid\" : df.loc[product, \"Chaud/Froid\"],\n",
    "                           \"F1\" : df.loc[product, \"F1\"],\n",
    "                           \"F2\" : df.loc[product, \"F2\"],\n",
    "                           \"F3\" : df.loc[product, \"F3\"]\n",
    "                          }\n",
    "            result_list.append(result_dict)\n",
    "\n",
    "df_result = pd.concat([pd.DataFrame(dict_ID, index=[0]) for dict_ID in result_list], ignore_index=True)\n",
    "\n",
    "# Print the value of each expression\n",
    "print(\"Total food cost: \", p.value(food_cost_expr))\n",
    "\n",
    "for product in df.index:\n",
    "    for index_jour in range(len(JOURS)):\n",
    "        print(f\"Valeur de carte_vars[{product}, {index_jour}]: {carte_vars[product, index_jour].varValue}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "41ab8704",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'spreadsheetId': '1wGohQGY_qV9f1dyeNQm9n6S7PVnNnTCC-QKybBPsw5U',\n",
       " 'updatedRange': 'Output!A2',\n",
       " 'updatedRows': 1,\n",
       " 'updatedColumns': 1,\n",
       " 'updatedCells': 1}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write the result back to Google sheets starting from the second row\n",
    "sheet_output = doc_outil_carte.worksheet(\"Output\")\n",
    "#Delete the old output\n",
    "doc_outil_carte.values_clear(\"Output!C1:Q500\")\n",
    "\n",
    "#Paste the new output\n",
    "sheet_output.update('C1',[df_result.columns.values.tolist()] + df_result.values.tolist())\n",
    "sheet_output.update('A2', f'{p.value(food_cost_expr):,.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "820b22c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y_0 is 1.\n",
      "y_1 is 1.\n",
      "y_2 is 1.\n",
      "y_3 is 1.\n",
      "y_4 is 1.\n",
      "y_5 is 1.\n",
      "y_6 is 1.\n",
      "y_7 is 1.\n",
      "y_8 is 0.\n",
      "y_9 is 1.\n",
      "y_10 is 1.\n",
      "y_11 is 1.\n",
      "y_12 is 1.\n",
      "y_13 is 1.\n",
      "y_14 is 1.\n",
      "y_15 is 1.\n",
      "y_16 is 1.\n",
      "y_17 is 0.\n",
      "y_18 is 1.\n",
      "y_19 is 1.\n",
      "y_20 is 1.\n",
      "y_21 is 1.\n",
      "y_22 is 1.\n",
      "y_23 is 0.\n",
      "y_24 is 1.\n",
      "y_25 is 1.\n",
      "y_26 is 1.\n",
      "y_27 is 1.\n",
      "y_28 is 0.\n",
      "y_29 is 1.\n",
      "y_30 is 1.\n",
      "y_31 is 0.\n",
      "y_32 is 1.\n",
      "y_33 is 1.\n",
      "y_34 is 1.\n",
      "y_35 is 1.\n",
      "y_36 is 1.\n",
      "y_37 is 1.\n",
      "y_38 is 1.\n",
      "y_39 is 1.\n",
      "y_40 is 1.\n",
      "y_41 is 1.\n",
      "y_42 is 1.\n",
      "y_43 is 1.\n",
      "y_44 is 1.\n",
      "y_45 is 1.\n",
      "y_46 is 1.\n",
      "y_47 is 1.\n",
      "y_48 is 1.\n",
      "y_49 is 0.\n",
      "y_50 is 1.\n",
      "y_51 is 1.\n",
      "y_52 is 1.\n",
      "y_53 is 1.\n",
      "y_54 is 1.\n",
      "y_55 is 1.\n",
      "y_56 is 0.\n",
      "y_57 is 1.\n",
      "y_58 is 0.\n",
      "y_59 is 1.\n",
      "y_60 is 1.\n",
      "y_61 is 1.\n",
      "y_62 is 1.\n",
      "y_63 is 1.\n",
      "y_64 is 1.\n",
      "y_65 is 1.\n",
      "y_66 is 1.\n",
      "y_67 is 0.\n",
      "y_68 is 1.\n",
      "y_69 is 1.\n",
      "y_70 is 1.\n",
      "y_71 is 1.\n",
      "y_72 is 1.\n",
      "y_73 is 1.\n",
      "y_74 is 1.\n",
      "y_75 is 1.\n",
      "y_76 is 1.\n",
      "y_77 is 1.\n",
      "y_78 is 1.\n",
      "y_79 is 1.\n",
      "y_80 is 1.\n",
      "y_81 is 1.\n",
      "y_82 is 1.\n",
      "y_83 is 1.\n",
      "y_84 is 1.\n",
      "y_85 is 1.\n",
      "y_86 is 0.\n",
      "y_87 is 1.\n",
      "y_88 is 1.\n",
      "y_89 is 1.\n",
      "y_90 is 0.\n",
      "y_91 is 0.\n",
      "y_92 is 0.\n",
      "y_93 is 0.\n",
      "y_94 is 1.\n",
      "y_95 is 0.\n",
      "y_96 is 0.\n"
     ]
    }
   ],
   "source": [
    "for dish, y in y_vars.items():\n",
    "    print(f\"y_{dish} is {y.value()}.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "079e870c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
